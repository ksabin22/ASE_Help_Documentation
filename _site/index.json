{
  "api/ASE_SABIN_KHANAL_77358588.ApplicationArray.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.ApplicationArray.html",
    "title": "Class ApplicationArray | ASE Project",
    "keywords": "Class ApplicationArray Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents an application array that provides functionality to define and manipulate integer or real arrays within a BOOSE program. public class ApplicationArray : Evaluation, ICommand Inheritance object Command Evaluation ApplicationArray Implements ICommand Derived ApplicationPeek ApplicationPoke Inherited Members Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationArray() Initializes a new instance of the ApplicationArray class. public ApplicationArray() Fields IntValue Stores the integer value being manipulated. protected int IntValue Field Value int PEEK A constant boolean flag indicating a read (\"peek\") operation when false. protected const bool PEEK = false Field Value bool POKE A constant boolean flag indicating a write (\"poke\") operation when true. public const bool POKE = true Field Value bool RealValue Stores the real (double) value being manipulated. protected double RealValue Field Value double columnCurrent The current resolved column index at runtime. protected int columnCurrent Field Value int columnExpression Stores the expression for the column index. protected string columnExpression Field Value string columnsCount The number of columns in the array, with a default of 1. protected int columnsCount Field Value int intArray The underlying two-dimensional integer array. protected int[,] intArray Field Value int[,] peekValue The value to be read (peek) from the array. protected string peekValue Field Value string pokeValue The value to be written (poke) to the array. protected string pokeValue Field Value string realArray The underlying two-dimensional real array. protected double[,] realArray Field Value double[,] rowCurrent The current resolved row index at runtime. protected int rowCurrent Field Value int rowExpression Stores the expression for the row index. protected string rowExpression Field Value string rowsCount The number of rows in the array. protected int rowsCount Field Value int type The type of the array (e.g., \"int\" or \"real\"). protected string type Field Value string Properties Columns Gets the number of columns in this array. protected int Columns { get; } Property Value int Rows Gets the number of rows in this array. protected int Rows { get; } Property Value int Methods ArrayRestrictions() Implements any constraints or conditions related to the array usage. Currently empty and can be overridden to provide custom restrictions. public void ArrayRestrictions() CheckParameters(string[]) Checks the provided parameters to ensure that the array has 3 or 4 parameters. Throws an exception if the parameter count is invalid. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] A list of parameters used to define the array. Exceptions CommandException Thrown when the parameter count is invalid. Compile() Compiles the array definition by validating parameters and adding the array as a variable to the program. public override void Compile() Exceptions CommandException Thrown when array definition is invalid. Execute() Executes the array creation logic, initializing either an integer or real array based on the specified type. public override void Execute() Exceptions CommandException Thrown when an unsupported array type is provided. GetIntArray(int, int) Retrieves an integer value from the underlying intArray at the specified row and column. public virtual int GetIntArray(int row, int col) Parameters row int The row index. col int The column index. Returns int The integer value at the specified position. Exceptions CommandException Thrown when the row or column index is out of bounds. GetRealArray(int, int) Retrieves a real (double) value from the underlying realArray at the specified row and column. public virtual double GetRealArray(int row, int col) Parameters row int The row index. col int The column index. Returns double The double value at the specified position. Exceptions CommandException Thrown when the row or column index is out of bounds. ProcessArrayParametersCompile(bool) Parses the parameter list during the compile phase to extract array variable names and indices for a poke or peek operation. protected virtual void ProcessArrayParametersCompile(bool isPokeOperation) Parameters isPokeOperation bool Indicates whether the operation is a write (true) or read (false). Exceptions CommandException Thrown when syntax or variable references are invalid. ProcessArrayParametersExecute(bool) Resolves expressions for row, column, and value (for poke operations) during execution, and performs the appropriate read or write operation on the array. protected virtual void ProcessArrayParametersExecute(bool isPokeOperation) Parameters isPokeOperation bool Indicates whether the operation is a write (true) or read (false). Exceptions CommandException Thrown when the indexes or values are invalid. ReduceRestrictionCounter() Decrements any restriction counters if necessary. Currently an empty placeholder. protected void ReduceRestrictionCounter() SetIntArray(int, int, int) Sets an integer value in the underlying intArray at the specified row and column. public virtual void SetIntArray(int value, int row, int col) Parameters value int The integer value to set. row int The row index. col int The column index. Exceptions CommandException Thrown when the row or column index is out of bounds. SetRealArray(double, int, int) Sets a real (double) value in the underlying realArray at the specified row and column. public virtual void SetRealArray(double value, int row, int col) Parameters value double The double value to set. row int The row index. col int The column index. Exceptions CommandException Thrown when the row or column index is out of bounds."
  },
  "api/ASE_SABIN_KHANAL_77358588.ApplicationBoolean.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.ApplicationBoolean.html",
    "title": "Class ApplicationBoolean | ASE Project",
    "keywords": "Class ApplicationBoolean Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents a custom boolean type inheriting from BOOSE.Boolean. public class ApplicationBoolean : Boolean, ICommand Inheritance object Command Evaluation Boolean ApplicationBoolean Implements ICommand Inherited Members Boolean.Compile() Boolean.Execute() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Contains logic to impose any necessary restrictions on the boolean object. This method is overridden from the base BOOSE.Boolean class, but is currently left empty. public override void Restrictions()"
  },
  "api/ASE_SABIN_KHANAL_77358588.ApplicationCast.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.ApplicationCast.html",
    "title": "Class ApplicationCast | ASE Project",
    "keywords": "Class ApplicationCast Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents a command that performs a cast operation from an integer variable to a real variable in the application. public class ApplicationCast : Command, ICommand Inheritance object Command ApplicationCast Implements ICommand Inherited Members Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods CheckParameters(string[]) Validates the parameters for the cast command. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of string parameters. Exceptions CommandException Thrown when the number of parameters is invalid. Compile() Compiles the cast command by ensuring the source and target variables exist and are compatible. public override void Compile() Exceptions CommandException Thrown when one or both variables do not exist, or when attempting to cast from a real variable to an integer variable. Execute() Executes the cast operation from the source integer variable to the target real variable. public override void Execute()"
  },
  "api/ASE_SABIN_KHANAL_77358588.ApplicationCompoundCommand.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.ApplicationCompoundCommand.html",
    "title": "Class ApplicationCompoundCommand | ASE Project",
    "keywords": "Class ApplicationCompoundCommand Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents a compound command in the application that extends conditional command functionality. public class ApplicationCompoundCommand : ApplicationConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand Implements ICommand Derived ApplicationElse ApplicationEnd ApplicationIf ApplicationWhile Inherited Members ApplicationConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationCompoundCommand() Initializes a new instance of the ApplicationCompoundCommand class. public ApplicationCompoundCommand() Properties CorrespondingCommand Gets or sets the corresponding conditional command associated with this compound command. public ConditionalCommand CorrespondingCommand { get; set; } Property Value ConditionalCommand Methods CheckParameters(string[]) Validates the parameters passed to the command. public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of parameters to validate. Exceptions CommandException Thrown when the number of parameters is not exactly one or when the parameter does not contain a valid 'end' marker. Compile() Compiles the compound command by invoking the base compile logic. public override void Compile() ResetOrDecreaseCount(int) Resets or decreases the count of a specific internal static field. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the count. Exceptions BOOSEException Thrown when the internal field '뇀' in the BOOSE.Boolean class cannot be accessed."
  },
  "api/ASE_SABIN_KHANAL_77358588.ApplicationConditionalCommand.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.ApplicationConditionalCommand.html",
    "title": "Class ApplicationConditionalCommand | ASE Project",
    "keywords": "Class ApplicationConditionalCommand Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents a conditional command in the application, extending the base BOOSE.ConditionalCommand functionality. public class ApplicationConditionalCommand : ConditionalCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand Implements ICommand Derived ApplicationCompoundCommand Inherited Members ConditionalCommand.endLineNumber ConditionalCommand.Compile() ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() Executes the conditional command logic and resets or decreases the internal count. public override void Execute() Remarks This method overrides the base BOOSE.ConditionalCommand.Execute() method to include additional logic for resetting or decreasing the count after execution. ResetOrDecreaseCount(int) Resets or decreases the count of a specific internal static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the count. Exceptions BOOSEException Thrown when the internal field '뇀' in the BOOSE.Boolean class cannot be accessed."
  },
  "api/ASE_SABIN_KHANAL_77358588.ApplicationElse.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.ApplicationElse.html",
    "title": "Class ApplicationElse | ASE Project",
    "keywords": "Class ApplicationElse Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents an 'else' command in the application, handling the alternative execution path in compound commands. public class ApplicationElse : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand ApplicationElse Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationElse() Initializes a new instance of the ApplicationElse class. public ApplicationElse() Properties CorrespondingEnd Gets or sets the corresponding BOOSE.End command. public End CorrespondingEnd { get; set; } Property Value End Methods CheckParameters(string[]) Validates the parameters for the 'else' command. public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of string parameters. Exceptions CommandException Thrown when the parameters do not consist of exactly one element with the value 'else'. Compile() Compiles the 'else' command by linking it with its corresponding BOOSE.End command and updating the program's state. public override void Compile() Execute() Executes the 'else' command, directing the program counter based on the condition of the corresponding command. public override void Execute()"
  },
  "api/ASE_SABIN_KHANAL_77358588.ApplicationEnd.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.ApplicationEnd.html",
    "title": "Class ApplicationEnd | ASE Project",
    "keywords": "Class ApplicationEnd Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents an application end command that concludes a compound command block such as If, While, or For in the BOOSE scripting environment. public class ApplicationEnd : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand ApplicationEnd Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.ResetOrDecreaseCount(int) ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationEnd() Initializes a new instance of the ApplicationEnd class. public ApplicationEnd() Methods Compile() Compiles the 'end' command by checking the corresponding command (If, While, or For) and ensuring the correct syntax is being used. public override void Compile() Exceptions CommandException Thrown when the syntax does not match the expected end identifier (e.g., 'ifEnd' for ApplicationIf). Execute() Executes the logic to conclude the corresponding block structure. If it is a While or For loop, this will update the Program Counter (PC) to properly loop or terminate. If it is a Method, it returns to the caller. public override void Execute() Exceptions CommandException Thrown when the loop control variable does not exist or when the loop step is invalid and causes a non-terminating loop."
  },
  "api/ASE_SABIN_KHANAL_77358588.ApplicationFor.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.ApplicationFor.html",
    "title": "Class ApplicationFor | ASE Project",
    "keywords": "Class ApplicationFor Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents a specialized 'For' command within the application that extends the base 'For' functionality. public class ApplicationFor : For, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand For ApplicationFor Implements ICommand Inherited Members For.Compile() For.LoopControlV For.From For.To For.Step ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Execute() Executes the 'For' command logic and resets or decreases the internal count. public override void Execute() Remarks This method overrides the base BOOSE.For.Execute() method to include additional logic for resetting or decreasing the count after execution. ResetOrDecreaseCount(int) Resets or decreases the count of a specific internal static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the count. Exceptions BOOSEException Thrown when the internal field '뇀' in the BOOSE.Boolean class cannot be accessed."
  },
  "api/ASE_SABIN_KHANAL_77358588.ApplicationIf.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.ApplicationIf.html",
    "title": "Class ApplicationIf | ASE Project",
    "keywords": "Class ApplicationIf Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents an 'if' command block within the application, extending ApplicationCompoundCommand. public class ApplicationIf : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand ApplicationIf Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.Compile() ApplicationCompoundCommand.ResetOrDecreaseCount(int) ApplicationConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationIf() Initializes a new instance of the ApplicationIf class. public ApplicationIf() Methods ReduceRestrictions() Reduces any restriction counters related to this command's operation. This method is currently not implemented. protected void ReduceRestrictions()"
  },
  "api/ASE_SABIN_KHANAL_77358588.ApplicationInt.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.ApplicationInt.html",
    "title": "Class ApplicationInt | ASE Project",
    "keywords": "Class ApplicationInt Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents an application-specific integer type, inheriting from the BOOSE BOOSE.Int class. public class ApplicationInt : Int, ICommand Inheritance object Command Evaluation Int ApplicationInt Implements ICommand Inherited Members Int.Compile() Int.Execute() Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Contains any restrictions or constraints specific to the ApplicationInt type. Currently, no restrictions have been defined. public override void Restrictions()"
  },
  "api/ASE_SABIN_KHANAL_77358588.ApplicationMethod.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.ApplicationMethod.html",
    "title": "Class ApplicationMethod | ASE Project",
    "keywords": "Class ApplicationMethod Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents an application-specific implementation of a BOOSE.Method in a BOOSE program. public class ApplicationMethod : Method, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand CompoundCommand Method ApplicationMethod Implements ICommand Inherited Members Method.CheckParameters(string[]) Method.Compile() Method.Execute() Method.LocalVariables Method.MethodName Method.Type CompoundCommand.ReduceRestrictions() CompoundCommand.CorrespondingCommand ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationMethod() Initializes a new instance of the ApplicationMethod class. public ApplicationMethod() Remarks This constructor overrides restrictions on method count by invoking Method.ReduceRestrictions twice and resets both the count and method count to zero. Methods ResetOrDecreaseCount(int) Resets or decreases the count of a specific internal static field in the BOOSE.Boolean class. public void ResetOrDecreaseCount(int newValue) Parameters newValue int The new value to set for the count. Exceptions BOOSEException Thrown when the internal field '뇀' in the BOOSE.Boolean class cannot be accessed. ResetOrDecreaseMethodCount(int) Resets or decreases the method count of a specific internal static field in the BOOSE.Method class. public void ResetOrDecreaseMethodCount(int newValue) Parameters newValue int The new value to set for the method count. Exceptions BOOSEException Thrown when the internal field '뇔' in the BOOSE.Method class cannot be accessed."
  },
  "api/ASE_SABIN_KHANAL_77358588.ApplicationPeek.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.ApplicationPeek.html",
    "title": "Class ApplicationPeek | ASE Project",
    "keywords": "Class ApplicationPeek Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Provides functionality to retrieve (peek) values from an array within a BOOSE program. public class ApplicationPeek : ApplicationArray, ICommand Inheritance object Command Evaluation ApplicationArray ApplicationPeek Implements ICommand Inherited Members ApplicationArray.PEEK ApplicationArray.POKE ApplicationArray.type ApplicationArray.IntValue ApplicationArray.RealValue ApplicationArray.rowsCount ApplicationArray.columnsCount ApplicationArray.intArray ApplicationArray.realArray ApplicationArray.pokeValue ApplicationArray.peekValue ApplicationArray.rowExpression ApplicationArray.columnExpression ApplicationArray.rowCurrent ApplicationArray.columnCurrent ApplicationArray.Rows ApplicationArray.Columns ApplicationArray.ArrayRestrictions() ApplicationArray.ReduceRestrictionCounter() ApplicationArray.ProcessArrayParametersCompile(bool) ApplicationArray.ProcessArrayParametersExecute(bool) ApplicationArray.SetIntArray(int, int, int) ApplicationArray.SetRealArray(double, int, int) ApplicationArray.GetIntArray(int, int) ApplicationArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationPeek() Initializes a new instance of the ApplicationPeek class. public ApplicationPeek() Methods CheckParameters(string[]) Validates the parameters required for the Peek operation. public override void CheckParameters(string[] parameters) Parameters parameters string[] An array of string parameters to be validated. Exceptions NotImplementedException Thrown because this method is currently not implemented. Compile() Prepares the array parameters for execution, specifically for a Peek operation. public override void Compile() Execute() Executes the Peek operation, allowing retrieval of targeted array elements. public override void Execute() Exceptions CommandException Thrown when the array type is unsupported."
  },
  "api/ASE_SABIN_KHANAL_77358588.ApplicationPoke.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.ApplicationPoke.html",
    "title": "Class ApplicationPoke | ASE Project",
    "keywords": "Class ApplicationPoke Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents a Poke operation that modifies elements in an array within a BOOSE program. public class ApplicationPoke : ApplicationArray, ICommand Inheritance object Command Evaluation ApplicationArray ApplicationPoke Implements ICommand Inherited Members ApplicationArray.PEEK ApplicationArray.POKE ApplicationArray.type ApplicationArray.IntValue ApplicationArray.RealValue ApplicationArray.rowsCount ApplicationArray.columnsCount ApplicationArray.intArray ApplicationArray.realArray ApplicationArray.pokeValue ApplicationArray.peekValue ApplicationArray.rowExpression ApplicationArray.columnExpression ApplicationArray.rowCurrent ApplicationArray.columnCurrent ApplicationArray.Rows ApplicationArray.Columns ApplicationArray.ArrayRestrictions() ApplicationArray.ReduceRestrictionCounter() ApplicationArray.ProcessArrayParametersCompile(bool) ApplicationArray.ProcessArrayParametersExecute(bool) ApplicationArray.SetIntArray(int, int, int) ApplicationArray.SetRealArray(double, int, int) ApplicationArray.GetIntArray(int, int) ApplicationArray.GetRealArray(int, int) Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationPoke() Initializes a new instance of the ApplicationPoke class. public ApplicationPoke() Methods CheckParameters(string[]) Validates the parameters required for the Poke operation. public override void CheckParameters(string[] parameter) Parameters parameter string[] An array of string parameters to be validated. Exceptions CommandException Thrown when the number of parameters is invalid. Compile() Prepares the array parameters for execution, specifically for a Poke operation. public override void Compile() Execute() Executes the Poke operation, allowing modification of targeted array elements. public override void Execute() Set(StoredProgram, string) Sets the stored program and parameter list for this Poke operation. public override void Set(StoredProgram program, string paramsList) Parameters program StoredProgram The stored program where this operation will be performed. paramsList string A string containing the parameters for this operation."
  },
  "api/ASE_SABIN_KHANAL_77358588.ApplicationReal.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.ApplicationReal.html",
    "title": "Class ApplicationReal | ASE Project",
    "keywords": "Class ApplicationReal Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents an application-specific real (double) type, extending functionality from the BOOSE Real class. public class ApplicationReal : Real, ICommand Inheritance object Command Evaluation Real ApplicationReal Implements ICommand Inherited Members Real.Compile() Real.Execute() Real.Value Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.CheckParameters(string[]) Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Methods Restrictions() Contains any restrictions or constraints specific to the ApplicationReal type. Currently, no restrictions have been defined. public override void Restrictions()"
  },
  "api/ASE_SABIN_KHANAL_77358588.ApplicationWhile.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.ApplicationWhile.html",
    "title": "Class ApplicationWhile | ASE Project",
    "keywords": "Class ApplicationWhile Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents a 'while' command block within the application, extending ApplicationCompoundCommand. public class ApplicationWhile : ApplicationCompoundCommand, ICommand Inheritance object Command Evaluation Boolean ConditionalCommand ApplicationConditionalCommand ApplicationCompoundCommand ApplicationWhile Implements ICommand Inherited Members ApplicationCompoundCommand.CorrespondingCommand ApplicationCompoundCommand.CheckParameters(string[]) ApplicationCompoundCommand.Compile() ApplicationCompoundCommand.ResetOrDecreaseCount(int) ApplicationConditionalCommand.Execute() ConditionalCommand.endLineNumber ConditionalCommand.EndLineNumber ConditionalCommand.Condition ConditionalCommand.LineNumber ConditionalCommand.CondType ConditionalCommand.ReturnLineNumber Boolean.Restrictions() Boolean.BoolValue Evaluation.expression Evaluation.evaluatedExpression Evaluation.varName Evaluation.value Evaluation.ProcessExpression(string) Evaluation.Expression Evaluation.VarName Evaluation.Value Evaluation.Local Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApplicationWhile() Initializes a new instance of the ApplicationWhile class. public ApplicationWhile() Methods ReduceRestrictions() Reduces any restriction counters related to this command's operation. This method is currently not implemented. protected void ReduceRestrictions()"
  },
  "api/ASE_SABIN_KHANAL_77358588.Fill.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.Fill.html",
    "title": "Class Fill | ASE Project",
    "keywords": "Class Fill Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents the Fill command for a canvas, which sets whether shapes are filled. public class Fill : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Fill Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Fill() Default constructor for the Fill class. public Fill() Fill(Canvas, string) Initializes the Fill command with a canvas and text. public Fill(Canvas c, string text) Parameters c Canvas The canvas object. text string The text parameter. Exceptions ArgumentNullException Thrown if text is null. Methods CheckParameters(string[]) Validates the parameters for the Fill command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters to validate. Exceptions CommandException Thrown if the parameter list is invalid or text is null, empty, or whitespace. Execute() Executes the Fill command. public override void Execute() Exceptions RestrictionException Thrown if the text is null, empty, whitespace, or exceeds the length limit. SetFilled(string) Sets whether shapes are filled based on the given string value. public void SetFilled(string isFilledStr) Parameters isFilledStr string \"true\" to enable filling; \"false\" to disable it. Exceptions CommandException Thrown if the value is not \"true\" or \"false\"."
  },
  "api/ASE_SABIN_KHANAL_77358588.Form1.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.Form1.html",
    "title": "Class Form1 | ASE Project",
    "keywords": "Class Form1 Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll public class Form1 : Form, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl Form Form1 Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members Form.SetVisibleCore(bool) Form.Activate() Form.ActivateMdiChild(Form) Form.AddOwnedForm(Form) Form.AdjustFormScrollbars(bool) Form.Close() Form.CreateAccessibilityInstance() Form.CreateControlsInstance() Form.CreateHandle() Form.DefWndProc(ref Message) Form.ProcessMnemonic(char) Form.CenterToParent() Form.CenterToScreen() Form.LayoutMdi(MdiLayout) Form.OnActivated(EventArgs) Form.OnBackgroundImageChanged(EventArgs) Form.OnBackgroundImageLayoutChanged(EventArgs) Form.OnClosing(CancelEventArgs) Form.OnClosed(EventArgs) Form.OnFormClosing(FormClosingEventArgs) Form.OnFormClosed(FormClosedEventArgs) Form.OnCreateControl() Form.OnDeactivate(EventArgs) Form.OnEnabledChanged(EventArgs) Form.OnEnter(EventArgs) Form.OnFontChanged(EventArgs) Form.OnGotFocus(EventArgs) Form.OnHandleCreated(EventArgs) Form.OnHandleDestroyed(EventArgs) Form.OnHelpButtonClicked(CancelEventArgs) Form.OnLayout(LayoutEventArgs) Form.OnLoad(EventArgs) Form.OnMaximizedBoundsChanged(EventArgs) Form.OnMaximumSizeChanged(EventArgs) Form.OnMinimumSizeChanged(EventArgs) Form.OnInputLanguageChanged(InputLanguageChangedEventArgs) Form.OnInputLanguageChanging(InputLanguageChangingEventArgs) Form.OnVisibleChanged(EventArgs) Form.OnMdiChildActivate(EventArgs) Form.OnMenuStart(EventArgs) Form.OnMenuComplete(EventArgs) Form.OnPaint(PaintEventArgs) Form.OnResize(EventArgs) Form.OnDpiChanged(DpiChangedEventArgs) Form.OnGetDpiScaledSize(int, int, ref Size) Form.OnRightToLeftLayoutChanged(EventArgs) Form.OnShown(EventArgs) Form.OnTextChanged(EventArgs) Form.ProcessCmdKey(ref Message, Keys) Form.ProcessDialogKey(Keys) Form.ProcessDialogChar(char) Form.ProcessKeyPreview(ref Message) Form.ProcessTabKey(bool) Form.RemoveOwnedForm(Form) Form.Select(bool, bool) Form.ScaleMinMaxSize(float, float, bool) Form.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Form.ScaleControl(SizeF, BoundsSpecified) Form.SetBoundsCore(int, int, int, int, BoundsSpecified) Form.SetClientSizeCore(int, int) Form.SetDesktopBounds(int, int, int, int) Form.SetDesktopLocation(int, int) Form.Show(IWin32Window) Form.ShowDialog() Form.ShowDialog(IWin32Window) Form.ToString() Form.UpdateDefaultButton() Form.OnResizeBegin(EventArgs) Form.OnResizeEnd(EventArgs) Form.OnStyleChanged(EventArgs) Form.ValidateChildren() Form.ValidateChildren(ValidationConstraints) Form.WndProc(ref Message) Form.AcceptButton Form.ActiveForm Form.ActiveMdiChild Form.AllowTransparency Form.AutoScroll Form.AutoSize Form.AutoSizeMode Form.AutoValidate Form.BackColor Form.FormBorderStyle Form.CancelButton Form.ClientSize Form.ControlBox Form.CreateParams Form.DefaultImeMode Form.DefaultSize Form.DesktopBounds Form.DesktopLocation Form.DialogResult Form.HelpButton Form.Icon Form.IsMdiChild Form.IsMdiContainer Form.IsRestrictedWindow Form.KeyPreview Form.Location Form.MaximizedBounds Form.MaximumSize Form.MainMenuStrip Form.MinimumSize Form.MaximizeBox Form.MdiChildren Form.MdiChildrenMinimizedAnchorBottom Form.MdiParent Form.MinimizeBox Form.Modal Form.Opacity Form.OwnedForms Form.Owner Form.RestoreBounds Form.RightToLeftLayout Form.ShowInTaskbar Form.ShowIcon Form.ShowWithoutActivation Form.Size Form.SizeGripStyle Form.StartPosition Form.Text Form.TopLevel Form.TopMost Form.TransparencyKey Form.WindowState Form.AutoSizeChanged Form.AutoValidateChanged Form.HelpButtonClicked Form.MaximizedBoundsChanged Form.MaximumSizeChanged Form.MinimumSizeChanged Form.Activated Form.Deactivate Form.FormClosing Form.FormClosed Form.Load Form.MdiChildActivate Form.MenuComplete Form.MenuStart Form.InputLanguageChanged Form.InputLanguageChanging Form.RightToLeftLayoutChanged Form.Shown Form.DpiChanged Form.ResizeBegin Form.ResizeEnd ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnMove(EventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.RescaleConstantsForDpi(int, int) ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Action) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateGraphics() Control.CreateControl() Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DoDragDrop(object, DragDropEffects, Bitmap, Point, bool) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(nint) Control.FromHandle(nint) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Action) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.Invoke<T>(Func<T>) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.LogicalToDeviceUnits(Size) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDataContextChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentDataContextChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnLocationChanged(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseDown(MouseEventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(nint, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.DataContext Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.CompanyName Control.ContainsFocus Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsAncestorSiteInDesignMode Control.IsMirrored Control.Left Control.Margin Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.RenderRightToLeft Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.TabIndex Control.TabStop Control.Tag Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DataContextChanged Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.Container Component.DesignMode Component.Events Component.Disposed MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.MemberwiseClone(bool) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Form1() public Form1() Methods Dispose(bool) Clean up any resources being used. protected override void Dispose(bool disposing) Parameters disposing bool true if managed resources should be disposed; otherwise, false."
  },
  "api/ASE_SABIN_KHANAL_77358588.GlobalConfig.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.GlobalConfig.html",
    "title": "Class GlobalConfig | ASE Project",
    "keywords": "Class GlobalConfig Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Holds global configuration settings for the application. public class GlobalConfig Inheritance object GlobalConfig Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsFillEnabled Gets or sets the filled status, which determines whether shapes should be filled or not. public static bool IsFillEnabled { get; set; } Property Value bool A boolean value indicating the filled status. The default value is false. MaxX Gets or sets the maximum X coordinate (width) of the canvas. This value defines the maximum horizontal position during drawing operations. The default value is 640 pixels. public static int MaxX { get; set; } Property Value int Remarks The value of MaxX should be updated if you want to change the canvas's horizontal limit. It should be a positive integer value. MaxY Gets or sets the maximum Y coordinate (height) of the canvas. This value defines the maximum vertical position during drawing operations. The default value is 480 pixels. public static int MaxY { get; set; } Property Value int Remarks The value of MaxY should be updated if you want to change the canvas's vertical limit. It should be a positive integer value. PenSize Gets or sets the global pen size used in drawing operations. public static int PenSize { get; set; } Property Value int An integer representing the pen size. Determines the thickness of lines in drawing operations. The default value is 1. Remarks The pen size determines the thickness of lines in drawing operations. A value of 1 indicates a pen thickness of 1 pixel, and the default value is 1."
  },
  "api/ASE_SABIN_KHANAL_77358588.GlobalConfigTest.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.GlobalConfigTest.html",
    "title": "Class GlobalConfigTest | ASE Project",
    "keywords": "Class GlobalConfigTest Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_Test_Project.dll Provides unit tests for verifying that the GlobalConfig class properly sets and retrieves global configuration properties. [TestClass] public class GlobalConfigTest Inheritance object GlobalConfigTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TestSetAndGetIsFillEnabled() Tests whether IsFillEnabled is correctly assigned and retrieved. [TestMethod] public void TestSetAndGetIsFillEnabled() TestSetAndGetMaxX() Tests whether MaxX is correctly assigned and retrieved. [TestMethod] public void TestSetAndGetMaxX() TestSetAndGetMaxY() Tests whether MaxY is correctly assigned and retrieved. [TestMethod] public void TestSetAndGetMaxY() TestSetAndGetPenSize() Tests whether PenSize is correctly assigned and retrieved. [TestMethod] public void TestSetAndGetPenSize()"
  },
  "api/ASE_SABIN_KHANAL_77358588.MyApp.AppCanvas.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.MyApp.AppCanvas.html",
    "title": "Class AppCanvas | ASE Project",
    "keywords": "Class AppCanvas Namespace ASE_SABIN_KHANAL_77358588.MyApp Assembly ASE_SABIN_KHANAL_77358588.dll Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas. public class AppCanvas : ICanvas Inheritance object AppCanvas Implements ICanvas Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class provides methods for drawing various shapes (lines, circles, rectangles, triangles) and text on a canvas represented by a bitmap. It supports operations such as setting the pen color and size, moving the pen to a new position, and resetting the canvas to its initial state. The canvas is defined by a width (XSIDE) and height (YSIDE), which are used to constrain drawing operations within the canvas boundaries. The class utilizes the Graphics object to perform rendering on the canvas. Constructors AppCanvas() Initializes a new instance of the AppCanvas class with default canvas size. public AppCanvas() Remarks This constructor sets the canvas size to the default values defined by the constants XSIDE and YSIDE. It also initializes the pen size to 1 and sets the pen color to black (RGB: 0, 0, 0). Exceptions CanvasException Thrown if the canvas size cannot be set properly or if invalid values are provided for pen size or color. Properties Filled Gets or sets a value indicating whether the shape is filled. public bool Filled { get; set; } Property Value bool A boolean value: true if the shape is filled, or false if it is not filled. PenColour Gets or sets the pen color for the next drawing operation. public object PenColour { get; set; } Property Value object Remarks This property allows you to retrieve or modify the current pen color used for drawing operations. The color is represented as a Color object, and it determines the color of lines, shapes, and other drawn elements on the canvas. Exceptions InvalidCastException Thrown if the provided value for the pen color is not a valid Color object. PenSize Gets or sets the pen size, which determines the thickness of the lines drawn. public int PenSize { get; set; } Property Value int The pen size, which is a positive integer. It determines how thick the lines will appear on the canvas. A value greater than zero is required. If the value is zero or negative, an exception will be thrown. Exceptions CanvasException Thrown when the pen size is set to a value less than or equal to zero. XSIDE The width of the canvas. public int XSIDE { get; set; } Property Value int Remarks This defines the horizontal dimension of the canvas. It is used to validate the X positions during drawing operations. The default value is 640 pixels. Xpos Gets or sets the X position for the next drawing operation. public int Xpos { get; set; } Property Value int Remarks This property controls the X coordinate of the pen position, which determines the horizontal position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the X position is outside the allowed canvas boundaries (less than 0 or greater than the canvas width). YSIDE The height of the canvas. public int YSIDE { get; set; } Property Value int Remarks This defines the vertical dimension of the canvas. It is used to validate the Y positions during drawing operations. The default value is 480 pixels. Ypos Gets or sets the Y position for the next drawing operation. public int Ypos { get; set; } Property Value int Remarks This property controls the Y coordinate of the pen position, which determines the vertical position for subsequent drawing operations on the canvas. Exceptions CanvasException Thrown if the Y position is outside the allowed canvas boundaries (less than 0 or greater than the canvas height). Methods Circle(int, bool) Attempts to draw a circle at the current pen position, either filled or outlined, depending on the specified parameter. Ensures the radius is valid and checks if the circle fits within the canvas boundaries. If the radius is invalid or the circle exceeds the canvas size, a warning is logged, and drawing is skipped. public void Circle(int radius, bool filled) Parameters radius int The radius of the circle. Must be a positive integer greater than zero. If the radius is invalid, the circle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the circle should be filled or outlined: true: Draws a filled circle. false: Draws an outlined circle. Examples The following example demonstrates how to draw a filled circle with a radius of 50: Circle(50, true); Remarks The method ensures that drawing operations do not disrupt the program's flow. If the circle cannot be drawn due to invalid input or canvas boundary constraints, the method logs a warning and continues execution. Exceptions CanvasException This exception is caught internally to prevent program termination. It is used to log errors for invalid radius values or when the circle exceeds canvas dimensions. Clear() Clears the canvas by filling it with a default background color. public void Clear() Remarks This method fills the entire canvas with white color, effectively erasing any previous drawings. It prepares the canvas for new drawing operations. DrawTo(int, int) Draws a line from the current pen position to a specified endpoint on the canvas. public void DrawTo(int x, int y) Parameters x int The X coordinate of the endpoint of the line. This value represents the position along the horizontal axis. y int The Y coordinate of the endpoint of the line. This value represents the position along the vertical axis. Examples The following example demonstrates how to draw a line from the current pen position to the point (100, 50): DrawTo(100, 50); Remarks The method updates the pen's current position to the specified endpoint after the line is drawn. Subsequent drawing operations will use the new position as the starting point. If the line cannot be drawn due to an uninitialized graphics context, the method logs a warning but does not interrupt execution. Exceptions CanvasException Thrown if the graphics context is not initialized or if the specified coordinates are outside the canvas boundaries. GetGraphics() Returns the current Graphics object used for drawing on the canvas. public Graphics GetGraphics() Returns Graphics The Graphics object associated with the current canvas. Examples The following example demonstrates how to retrieve the current Graphics object and handle any potential exceptions if the graphics object is not initialized: try { Graphics currentGraphics = GetGraphics(); // Use currentGraphics for drawing operations, if not null } catch (CanvasException ex) { Console.WriteLine($\"Error: {ex.Message}\"); // Handle the error (e.g., log it) } Remarks This method allows access to the internal Graphics object used for drawing on the canvas. If the graphics object has not been initialized (i.e., it is null), a BOOSE.CanvasException is thrown, indicating that the drawing cannot proceed. Exceptions CanvasException Thrown if the graphics object is not initialized or is null. This exception is thrown when there is an attempt to retrieve the Graphics object before it is set. MoveTo(int, int) Moves the drawing cursor to a specified position on the canvas without drawing any lines. public void MoveTo(int x, int y) Parameters x int The X coordinate to move the cursor to. Represents the horizontal position on the canvas. Must be within the canvas boundaries. y int The Y coordinate to move the cursor to. Represents the vertical position on the canvas. Must be within the canvas boundaries. Examples The following example demonstrates how to move the pen to position (50, 100) without drawing: MoveTo(50, 100); Remarks This method updates the current position of the pen to the specified coordinates (x, y) without performing any drawing operations. It ensures that subsequent drawing operations begin from the new cursor position. If the specified coordinates are outside the canvas boundaries, the position is not updated, and a warning is logged. Exceptions CanvasException Thrown if the specified coordinates are outside the canvas boundaries defined by XSIDE and YSIDE. Rect(int, int, bool) Draws a rectangle at the current cursor position with the specified dimensions and style (filled or outline). public void Rect(int width, int height, bool filled) Parameters width int The width of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. height int The height of the rectangle. Must be a positive integer greater than zero. If the value is invalid, the rectangle will not be drawn, and a warning will be logged. filled bool A boolean indicating whether the rectangle should be filled or outlined: true: Draws a filled rectangle. false: Draws an outlined rectangle. Examples The following example demonstrates how to draw a filled rectangle with a width of 100 and height of 50: Rect(100, 50, true); Remarks The rectangle is drawn starting from the current cursor position (xPos, yPos). If the rectangle's dimensions are invalid or it exceeds the canvas boundaries, it will not be drawn, and a warning will be logged. This ensures the program continues execution without interruption. Exceptions CanvasException Thrown if the specified rectangle dimensions are invalid or if the rectangle exceeds canvas boundaries. Reset() Resets the canvas to its initial state by resetting the drawing cursor position to the top-left corner. public void Reset() Examples The following example demonstrates how to reset the canvas and start fresh with drawing: Reset(); // Resets the drawing cursor to the top-left corner Remarks This method resets the drawing cursor (pen position) to the initial position at (0, 0). It also resets the global pen size and fill status to their default values and clears the canvas. Exceptions CanvasException Thrown if there is an issue with resetting the canvas. For example, if the canvas is in an invalid state or has not been properly initialized, an exception could be thrown. Set(int, int) Sets the canvas size and initializes the drawing surface. public void Set(int xsize, int ysize) Parameters xsize int The width of the canvas, in pixels. ysize int The height of the canvas, in pixels. Remarks This method initializes the canvas with the specified width and height. It also sets the starting position of the drawing cursor (xPos, yPos) to the top-left corner (0, 0). After setting the canvas size, it creates a new Bitmap object for drawing and a corresponding Graphics object. Additionally, it clears the canvas to prepare for drawing. Exceptions CanvasException Thrown if the width or height of the canvas is invalid (e.g., negative or zero), or if there is an error during the initialization of the drawing surface. SetCanvas(Bitmap, Graphics) Sets the canvas by assigning the provided Bitmap and Graphics objects for drawing operations. public void SetCanvas(Bitmap newBitmap, Graphics newGraphics) Parameters newBitmap Bitmap The Bitmap object to be used as the canvas surface. This object holds the pixel data for the canvas. newGraphics Graphics The Graphics object to be used for rendering on the canvas. This object provides drawing capabilities like shapes, text, and images. Examples The following example demonstrates how to initialize a canvas with a 500x500 Bitmap: Bitmap bitmap = new Bitmap(500, 500); Graphics graphics = Graphics.FromImage(bitmap); SetCanvas(bitmap, graphics); Remarks This method initializes or reinitializes the internal canvas by setting the Bitmap and Graphics objects. After setting the canvas, it clears the drawing surface with a white background to provide a fresh start. If you need a specific background color, you can modify the method to accept a color parameter or change the default behavior. Exceptions CanvasException Thrown if either newBitmap or newGraphics is null. SetColour(int, int, int) Sets the pen color using specified RGB values. public void SetColour(int red, int green, int blue) Parameters red int The red component of the color, ranging from 0 to 255. green int The green component of the color, ranging from 0 to 255. blue int The blue component of the color, ranging from 0 to 255. Examples The following example demonstrates how to set the pen color to blue: SetColour(0, 0, 255); // Sets the pen color to pure blue Remarks This method allows precise control of the pen's color by specifying the intensity of red, green, and blue components. If an invalid value is provided, an exception is thrown. The pen is updated with the new color and retains the existing pen size. Exceptions CanvasException Thrown when any of the RGB components are outside the valid range of 0 to 255. Tri(int, int) Draws a triangle within the specified bounding rectangle, ensuring it fits within the canvas boundaries. public void Tri(int width, int height) Parameters width int The width of the bounding rectangle, which defines the base of the triangle. height int The height of the bounding rectangle, which defines the height of the triangle. Examples The following example demonstrates how to draw a triangle with width 100 and height 50: Tri(100, 50); // Draws a triangle with base 100 and height 50 Remarks The method validates the triangle's width and height to ensure they are positive. It then checks if the triangle's bounding points fit within the canvas boundaries. If any point exceeds the canvas size, a CanvasException is thrown. Exceptions CanvasException Thrown if the triangle dimensions are invalid, exceed canvas boundaries, or are non-positive. WriteText(string) Draws the specified text at the current cursor position on the canvas. public void WriteText(string text) Parameters text string The text to be drawn on the canvas. Examples The following example demonstrates how to draw text at the current position: WriteText(\"Hello, Canvas!\"); // Draws the text \"Hello, Canvas!\" at the current cursor position Remarks The method checks whether the input text is valid (not null, empty, or whitespace). If the text exceeds the canvas boundaries, a BOOSE.CanvasException is thrown. The method also ensures the graphics object is initialized before attempting to draw the text. Exceptions CanvasException Thrown if the text is null, empty, or exceeds canvas boundaries. It is also thrown if the graphics object is not initialized. getBitmap() Returns the Bitmap object representing the current drawing on the canvas. public object getBitmap() Returns object The Bitmap object associated with the current canvas. This object contains the pixel data for the current drawing and can be used to save or manipulate the canvas image. Remarks The Bitmap object returned by this method reflects the current state of the canvas, including any drawings made with the pen. If no drawing has been done, it will return an empty or unmodified bitmap. Exceptions CanvasException Thrown if the Bitmap object has not been initialized or there is an issue with accessing it."
  },
  "api/ASE_SABIN_KHANAL_77358588.MyApp.AppCommandFactory.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.MyApp.AppCommandFactory.html",
    "title": "Class AppCommandFactory | ASE Project",
    "keywords": "Class AppCommandFactory Namespace ASE_SABIN_KHANAL_77358588.MyApp Assembly ASE_SABIN_KHANAL_77358588.dll Factory class responsible for creating ICommand instances based on a command string. Inherits from the abstract CommandFactory class. public class AppCommandFactory : CommandFactory, ICommandFactory Inheritance object CommandFactory AppCommandFactory Implements ICommandFactory Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppCommandFactory() Initializes a new instance of the AppCommandFactory class. public AppCommandFactory() Methods MakeCommand(string) Creates an ICommand instance corresponding to the provided command string. public override ICommand MakeCommand(string command) Parameters command string The command name as a string. Returns ICommand An instance of a class that implements ICommand. Exceptions FactoryException Thrown when the provided command string does not match any known commands."
  },
  "api/ASE_SABIN_KHANAL_77358588.MyApp.AppPraser.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.MyApp.AppPraser.html",
    "title": "Class AppPraser | ASE Project",
    "keywords": "Class AppPraser Namespace ASE_SABIN_KHANAL_77358588.MyApp Assembly ASE_SABIN_KHANAL_77358588.dll The AppPraser class implements the BOOSE.IParser interface to parse command lines into BOOSE.ICommand objects that can be processed by the application. public class AppPraser : IParser Inheritance object AppPraser Implements IParser Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppPraser(CommandFactory, StoredProgram) Initializes a new instance of the AppPraser class. public AppPraser(CommandFactory factory, StoredProgram program) Parameters factory CommandFactory An instance of BOOSE.CommandFactory used to create command objects. program StoredProgram An instance of BOOSE.StoredProgram that manages stored variables and other state information for the parsed commands. Methods ParseCommand(string) Parses a single line of input and returns an BOOSE.ICommand object based on the recognized command type and parameters. public virtual ICommand ParseCommand(string line) Parameters line string A string containing the command and its parameters. Returns ICommand An BOOSE.ICommand object representing the parsed command, or null if the line should be ignored (e.g., comment lines starting with '*'). Exceptions ParserException Thrown when attempting to assign a value to a non-existing variable or if the variable type is unknown. ParseProgram(string) Parses an entire program source represented by a string, line by line. Each line is parsed into a command, and errors are collected as needed. public virtual void ParseProgram(string program) Parameters program string A string containing the complete program to be parsed, with commands separated by newline characters."
  },
  "api/ASE_SABIN_KHANAL_77358588.MyApp.Clear.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.MyApp.Clear.html",
    "title": "Class Clear | ASE Project",
    "keywords": "Class Clear Namespace ASE_SABIN_KHANAL_77358588.MyApp Assembly ASE_SABIN_KHANAL_77358588.dll Represents a command to clear all elements from the canvas. public class Clear : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Clear Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Clear() Default constructor for the Clear command. public Clear() Clear(Canvas) Initializes a new instance of the Clear class with a canvas. public Clear(Canvas c) Parameters c Canvas The canvas to be cleared. Methods CheckParameters(string[]) Checks parameters for the command. No validation needed as this command does not use parameters. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters. Execute() Executes the clear command by removing all elements from the canvas. public override void Execute()"
  },
  "api/ASE_SABIN_KHANAL_77358588.MyApp.MyRectangle.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.MyApp.MyRectangle.html",
    "title": "Class MyRectangle | ASE Project",
    "keywords": "Class MyRectangle Namespace ASE_SABIN_KHANAL_77358588.MyApp Assembly ASE_SABIN_KHANAL_77358588.dll Represents a rectangle command that can be drawn on a canvas. Inherits from BOOSE.CommandTwoParameters. public class MyRectangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters MyRectangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyRectangle() Initializes a new instance of the MyRectangle class. Default constructor. public MyRectangle() MyRectangle(Canvas, int, int) Initializes a new instance of the MyRectangle class with specified canvas, width, and height. public MyRectangle(Canvas canvas, int width, int height) Parameters canvas Canvas The canvas on which the rectangle will be drawn. width int The width of the rectangle. height int The height of the rectangle. Methods CheckParameters(string[]) Checks the validity of the parameters (width and height) for the rectangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameter strings. Exceptions CommandException Thrown when the number of parameters is incorrect or the dimensions are invalid. Execute() Executes the rectangle drawing command. public override void Execute() Exceptions RestrictionException Thrown when the width or height exceeds the maximum allowed limit of 2000."
  },
  "api/ASE_SABIN_KHANAL_77358588.MyApp.Reset.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.MyApp.Reset.html",
    "title": "Class Reset | ASE Project",
    "keywords": "Class Reset Namespace ASE_SABIN_KHANAL_77358588.MyApp Assembly ASE_SABIN_KHANAL_77358588.dll Represents a command to reset the canvas. Inherits from BOOSE.CommandOneParameter. public class Reset : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter Reset Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Reset() Initializes a new instance of the Reset class. public Reset() Reset(Canvas) Initializes a new instance of the Reset class with a specified canvas. public Reset(Canvas c) Parameters c Canvas The BOOSE.Canvas object to be reset. Methods CheckParameters(string[]) Checks the validity of the parameters provided to the reset command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters to validate. Execute() Executes the reset command by resetting the associated canvas. public override void Execute()"
  },
  "api/ASE_SABIN_KHANAL_77358588.MyApp.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.MyApp.html",
    "title": "Namespace ASE_SABIN_KHANAL_77358588.MyApp | ASE Project",
    "keywords": "Namespace ASE_SABIN_KHANAL_77358588.MyApp Classes AppCanvas Implementation of the BOOSE.ICanvas interface for performing drawing operations on a bitmap canvas. AppCommandFactory Factory class responsible for creating ICommand instances based on a command string. Inherits from the abstract CommandFactory class. AppPraser The AppPraser class implements the BOOSE.IParser interface to parse command lines into BOOSE.ICommand objects that can be processed by the application. Clear Represents a command to clear all elements from the canvas. MyRectangle Represents a rectangle command that can be drawn on a canvas. Inherits from BOOSE.CommandTwoParameters. Reset Represents a command to reset the canvas. Inherits from BOOSE.CommandOneParameter."
  },
  "api/ASE_SABIN_KHANAL_77358588.MyCircle.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.MyCircle.html",
    "title": "Class MyCircle | ASE Project",
    "keywords": "Class MyCircle Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents a command to draw a circle on the canvas. public class MyCircle : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter MyCircle Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyCircle() Default constructor for MyCircle. public MyCircle() MyCircle(Canvas, int) Initializes a new instance of MyCircle with a canvas and radius. public MyCircle(Canvas canvas, int radius) Parameters canvas Canvas The canvas to draw on. radius int The radius of the circle. Methods CheckParameters(string[]) Validates the parameters for the circle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to draw a circle. public override void Execute()"
  },
  "api/ASE_SABIN_KHANAL_77358588.MyDrawTo.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.MyDrawTo.html",
    "title": "Class MyDrawTo | ASE Project",
    "keywords": "Class MyDrawTo Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents a command that draws a line to specific coordinates (x, y) on the canvas. This command takes two parameters: the x and y coordinates where the line should be drawn. public class MyDrawTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters MyDrawTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyDrawTo() Initializes a new instance of the MyDrawTo class with default values. public MyDrawTo() MyDrawTo(Canvas, int, int) Initializes a new instance of the MyDrawTo class with the specified canvas and coordinates. public MyDrawTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas where the line will be drawn. x int The x-coordinate to draw the line to. y int The y-coordinate to draw the line to. Exceptions RestrictionException Thrown when coordinates are negative. Methods CheckParameters(string[]) Checks the parameters provided to the command to ensure they are valid. This method ensures that the command has exactly two parameters and both are valid non-negative integers. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown if the parameters are invalid or missing. Execute() Executes the drawing command by sending the line-drawing request to the canvas. This method checks if the coordinates are valid before drawing. public override void Execute()"
  },
  "api/ASE_SABIN_KHANAL_77358588.MyFill.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.MyFill.html",
    "title": "Class MyFill | ASE Project",
    "keywords": "Class MyFill Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents a command to fill the canvas with text. public class MyFill : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter MyFill Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyFill() Default constructor for MyFill. public MyFill() MyFill(Canvas, string) Initializes a new instance of MyFill with a canvas and text. public MyFill(Canvas c, string text) Parameters c Canvas The canvas to draw on. text string The text to be used for filling. Exceptions ArgumentNullException Thrown if text is null. Methods CheckParameters(string[]) Validates the parameters for the fill command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to fill the canvas with text. public override void Execute() SetFilled(string) Sets the fill state based on the given text. public void SetFilled(string isFilledStr) Parameters isFilledStr string The string representing whether to fill (true/false). Exceptions CommandException Thrown when the value is not \"true\" or \"false\"."
  },
  "api/ASE_SABIN_KHANAL_77358588.MyMoveTo.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.MyMoveTo.html",
    "title": "Class MyMoveTo | ASE Project",
    "keywords": "Class MyMoveTo Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents a command to move to specific coordinates on the canvas. public class MyMoveTo : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters MyMoveTo Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyMoveTo() Initializes a new instance of the MyMoveTo class. public MyMoveTo() MyMoveTo(Canvas, int, int) Initializes a new instance of the MyMoveTo class with a canvas and coordinates. public MyMoveTo(Canvas canvas, int x, int y) Parameters canvas Canvas The canvas to move on. x int The x-coordinate. y int The y-coordinate. Exceptions RestrictionException Thrown when coordinates exceed 2000. Methods CheckParameters(string[]) Validates the parameters for the move-to command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Execute() Executes the command to move to the specified coordinates on the canvas. public override void Execute()"
  },
  "api/ASE_SABIN_KHANAL_77358588.MyPenColour.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.MyPenColour.html",
    "title": "Class MyPenColour | ASE Project",
    "keywords": "Class MyPenColour Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents a command to set the pen color on the canvas using RGB values. public class MyPenColour : CommandThreeParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters CommandThreeParameters MyPenColour Implements ICommand Inherited Members CommandThreeParameters.param3 CommandThreeParameters.param3unprocessed CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MyPenColour() Default constructor for MyPenColour. public MyPenColour() MyPenColour(Canvas, int, int, int) Initializes a new instance of MyPenColour with a canvas and RGB values. public MyPenColour(Canvas canvas, int r, int g, int b) Parameters canvas Canvas The canvas to set the pen color on. r int The red component of the color. g int The green component of the color. b int The blue component of the color. Methods CheckParameters(string[]) Validates the parameters for the pen color command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] The list of parameters passed to the command. Exceptions CommandException Thrown when the parameter list is invalid. Execute() Executes the command to set the pen color on the canvas. public override void Execute()"
  },
  "api/ASE_SABIN_KHANAL_77358588.MyStoredProgram.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.MyStoredProgram.html",
    "title": "Class MyStoredProgram | ASE Project",
    "keywords": "Class MyStoredProgram Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents a stored program that can be executed on a canvas, with support for variables, methods, and conditional commands. Inherits from BOOSE.StoredProgram. public class MyStoredProgram : StoredProgram, IList, ICollection, IEnumerable, ICloneable, IStoredProgram Inheritance object ArrayList StoredProgram MyStoredProgram Implements IList ICollection IEnumerable ICloneable IStoredProgram Inherited Members StoredProgram.FindVariable(Evaluation) ArrayList.Adapter(IList) ArrayList.Add(object) ArrayList.AddRange(ICollection) ArrayList.BinarySearch(int, int, object, IComparer) ArrayList.BinarySearch(object) ArrayList.BinarySearch(object, IComparer) ArrayList.Clear() ArrayList.Clone() ArrayList.Contains(object) ArrayList.CopyTo(Array) ArrayList.CopyTo(Array, int) ArrayList.CopyTo(int, Array, int, int) ArrayList.FixedSize(ArrayList) ArrayList.FixedSize(IList) ArrayList.GetEnumerator() ArrayList.GetEnumerator(int, int) ArrayList.GetRange(int, int) ArrayList.IndexOf(object) ArrayList.IndexOf(object, int) ArrayList.IndexOf(object, int, int) ArrayList.Insert(int, object) ArrayList.InsertRange(int, ICollection) ArrayList.LastIndexOf(object) ArrayList.LastIndexOf(object, int) ArrayList.LastIndexOf(object, int, int) ArrayList.ReadOnly(ArrayList) ArrayList.ReadOnly(IList) ArrayList.Remove(object) ArrayList.RemoveAt(int) ArrayList.RemoveRange(int, int) ArrayList.Repeat(object, int) ArrayList.Reverse() ArrayList.Reverse(int, int) ArrayList.SetRange(int, ICollection) ArrayList.Sort() ArrayList.Sort(IComparer) ArrayList.Sort(int, int, IComparer) ArrayList.Synchronized(ArrayList) ArrayList.Synchronized(IList) ArrayList.ToArray() ArrayList.ToArray(Type) ArrayList.TrimToSize() ArrayList.Capacity ArrayList.Count ArrayList.IsFixedSize ArrayList.IsReadOnly ArrayList.IsSynchronized ArrayList.this[int] ArrayList.SyncRoot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MyStoredProgram(ICanvas) Initializes a new instance of the MyStoredProgram class. public MyStoredProgram(ICanvas _canvas) Parameters _canvas ICanvas The canvas on which commands are executed. Fields SyntaxOk Indicates whether the syntax of the program is valid. public bool SyntaxOk Field Value bool Properties PC Gets or sets the program counter. public override int PC { get; set; } Property Value int Methods Add(Command) Adds a command to the stored program. public override int Add(Command C) Parameters C Command The command to add. Returns int The index at which the command was added. Exceptions StoredProgramException Thrown when the command is null. AddMethod(Method) Adds a method to the program. public override void AddMethod(Method M) Parameters M Method The method to add. AddVariable(Evaluation) Adds a variable to the program. public override void AddVariable(Evaluation Variable) Parameters Variable Evaluation The variable to add. Commandsleft() Determines whether there are any commands left to execute. public override bool Commandsleft() Returns bool true if there are commands left to execute; otherwise, false. DeleteVariable(string) Deletes the specified variable from the program. public override void DeleteVariable(string varName) Parameters varName string The name of the variable to delete. EvaluateExpression(string) Evaluates a mathematical or variable-based expression. public override string EvaluateExpression(string Exp) Parameters Exp string The expression to evaluate. Returns string The result of the expression as a string. Exceptions StoredProgramException Thrown if the expression syntax is invalid or an evaluation error occurs. EvaluateExpressionWithString(string) Evaluates an expression that may include string concatenation. public override string EvaluateExpressionWithString(string expression) Parameters expression string The expression to evaluate. Returns string The resulting string after evaluation. FindVariable(string) Finds the index of a variable by its name. public override int FindVariable(string varName) Parameters varName string The name of the variable to find. Returns int The index of the variable; -1 if not found. GetMethod(string) Retrieves a method by its name. public override Method GetMethod(string MethodName) Parameters MethodName string Name of the method to retrieve. Returns Method The BOOSE.Method object with the specified name. Exceptions StoredProgramException Thrown when the method is not found. GetVarValue(string) Retrieves the value of a variable as a string. public override string GetVarValue(string varName) Parameters varName string The name of the variable. Returns string The string representation of the variable's value. Exceptions StoredProgramException Thrown when the variable is not found. GetVariable(int) Retrieves a variable by its index. public override Evaluation GetVariable(int index) Parameters index int The index of the variable. Returns Evaluation The BOOSE.Evaluation object representing the variable. Exceptions StoredProgramException Thrown when the index is invalid. GetVariable(string) Retrieves a variable by its name. public override Evaluation GetVariable(string VarName) Parameters VarName string The name of the variable to retrieve. Returns Evaluation The BOOSE.Evaluation object representing the variable. Exceptions StoredProgramException Thrown when the variable is not found. IsExpression(string) Determines whether a given string is an expression. public override bool IsExpression(string expression) Parameters expression string The string to evaluate. Returns bool true if the string is an expression; otherwise, false. NextCommand() Retrieves the next command to execute and advances the program counter. public override object NextCommand() Returns object The next command as an object. Pop() Pops the top conditional command from the stack. public override ConditionalCommand Pop() Returns ConditionalCommand The BOOSE.ConditionalCommand popped from the stack. Exceptions StoredProgramException Thrown when there is an error popping from the stack. Push(ConditionalCommand) Pushes a conditional command onto the stack. public override void Push(ConditionalCommand Com) Parameters Com ConditionalCommand The conditional command to push. ResetProgram() Resets the entire program, clearing variables and commands, and resetting the canvas. public virtual void ResetProgram() Run() Executes all commands in the stored program sequentially. public override void Run() UpdateVariable(string, bool) Updates a boolean variable's value. public override void UpdateVariable(string varName, bool value) Parameters varName string The name of the variable to update. value bool The new boolean value. Exceptions CommandException Thrown when the variable type is invalid for the operation. UpdateVariable(string, double) Updates a real (double) variable's value. public override void UpdateVariable(string varName, double value) Parameters varName string The name of the variable to update. value double The new double value. Exceptions CommandException Thrown when the variable type is invalid for the operation. UpdateVariable(string, int) Updates an integer variable's value. public override void UpdateVariable(string varName, int value) Parameters varName string The name of the variable to update. value int The new integer value. Exceptions StoredProgramException Thrown when the variable is not found. VariableExists(string) Determines whether a variable with the specified name exists. public override bool VariableExists(string varName) Parameters varName string The name of the variable to check. Returns bool true if the variable exists; otherwise, false."
  },
  "api/ASE_SABIN_KHANAL_77358588.PenSize.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.PenSize.html",
    "title": "Class PenSize | ASE Project",
    "keywords": "Class PenSize Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents a command that sets the pen size for drawing on the Canvas. The command takes one parameter: the desired pen size. public class PenSize : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter PenSize Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks The PenSize class is responsible for validating and applying the pen size. It ensures the pen size: Is a non-negative integer. Does not exceed 100. If validation fails, a BOOSE.RestrictionException is thrown. Constructors PenSize() Initializes a new instance of the PenSize class with default values. public PenSize() Remarks This default constructor can be used when no initial pen size is provided. The pen size can be set later using the Execute() method. PenSize(Canvas, int) Initializes a new instance of the PenSize class with a specified Canvas and pen size. public PenSize(Canvas c, int pensize) Parameters c Canvas The BOOSE.Canvas object where the pen size will be applied. pensize int The desired pen size to be set. Remarks Use this constructor when creating the command with a known pen size and a Canvas reference. Methods CheckParameters(string[]) Validates the parameters provided for the PenSize command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of string parameters representing the pen size. Examples The following example demonstrates parameter validation: PenSize penSizeCommand = new PenSize(); penSizeCommand.CheckParameters(new string[] { \"10\" }); // No exception penSizeCommand.CheckParameters(new string[] { }); // Throws CommandException Remarks This method checks that: The parameter list contains exactly one parameter. If validation fails, a BOOSE.CommandException is thrown. Exceptions CommandException Thrown when the parameter list is null or does not contain exactly 1 parameter. Execute() Executes the PenSize command to set the pen size on the Canvas. public override void Execute() Examples The following example demonstrates how to use the PenSize class: Canvas myCanvas = new Canvas(); PenSize penSizeCommand = new PenSize(myCanvas, 10); penSizeCommand.Execute(); Remarks The method performs the following steps: Extracts the pen size parameter from the base class. Validates that the pen size is within the valid range (0 to 100). Sets the pen size using the SetPenSize(int) method. If the pen size is invalid (either too large or negative), a BOOSE.RestrictionException is thrown. Exceptions RestrictionException Thrown when the pen size exceeds 100 or is negative. SetPenSize(int) Sets the pen size using an integer argument. public void SetPenSize(int penSize) Parameters penSize int The pen size to set. Must be a non-negative integer. Remarks This method updates the global pen size setting in the application."
  },
  "api/ASE_SABIN_KHANAL_77358588.Triangle.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.Triangle.html",
    "title": "Class Triangle | ASE Project",
    "keywords": "Class Triangle Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents a command to draw a triangle with a specified base and height. public class Triangle : CommandTwoParameters, ICommand Inheritance object Command CanvasCommand CommandOneParameter CommandTwoParameters Triangle Implements ICommand Inherited Members CommandTwoParameters.param2 CommandTwoParameters.param2unprocessed CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Triangle() Default constructor. public Triangle() Triangle(Canvas, int, int) Constructor to initialize the triangle with canvas, base length, and height. public Triangle(Canvas c, int baseLength, int height) Parameters c Canvas Canvas object where the triangle will be drawn. baseLength int Base length of the triangle. height int Height of the triangle. Methods CheckParameters(string[]) Checks the validity of the input parameters for the triangle command. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] Array of parameters for the command. Execute() Executes the triangle drawing command. public override void Execute()"
  },
  "api/ASE_SABIN_KHANAL_77358588.WriteTo.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.WriteTo.html",
    "title": "Class WriteTo | ASE Project",
    "keywords": "Class WriteTo Namespace ASE_SABIN_KHANAL_77358588 Assembly ASE_SABIN_KHANAL_77358588.dll Represents a command to write text to a canvas with validation and processing. public class WriteTo : CommandOneParameter, ICommand Inheritance object Command CanvasCommand CommandOneParameter WriteTo Implements ICommand Inherited Members CommandOneParameter.param1 CommandOneParameter.param1unprocessed CanvasCommand.yPos CanvasCommand.xPos CanvasCommand.canvas CanvasCommand.Canvas Command.program Command.parameterList Command.parameters Command.paramsint Command.Set(StoredProgram, string) Command.Compile() Command.ProcessParameters(string) Command.ToString() Command.Program Command.Name Command.ParameterList Command.Parameters Command.Paramsint object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors WriteTo() Initializes a new instance of the WriteTo class. public WriteTo() WriteTo(Canvas, string) Initializes a new instance of the WriteTo class with a specified canvas and text. public WriteTo(Canvas c, string text) Parameters c Canvas The canvas to write to. text string The text to write. Methods CheckParameters(string[]) Checks the parameters provided to ensure they meet the required criteria. public override void CheckParameters(string[] parameterList) Parameters parameterList string[] An array of parameters to validate. Exceptions CommandException Thrown when the number of parameters is incorrect or the text parameter is invalid. Execute() Executes the write command by processing and validating the text, then writing it to the canvas. public override void Execute() Exceptions RestrictionException Thrown when the text is null, empty, whitespace, or exceeds 100 characters."
  },
  "api/ASE_SABIN_KHANAL_77358588.html": {
    "href": "api/ASE_SABIN_KHANAL_77358588.html",
    "title": "Namespace ASE_SABIN_KHANAL_77358588 | ASE Project",
    "keywords": "Namespace ASE_SABIN_KHANAL_77358588 Classes ApplicationArray Represents an application array that provides functionality to define and manipulate integer or real arrays within a BOOSE program. ApplicationBoolean Represents a custom boolean type inheriting from BOOSE.Boolean. ApplicationCast Represents a command that performs a cast operation from an integer variable to a real variable in the application. ApplicationCompoundCommand Represents a compound command in the application that extends conditional command functionality. ApplicationConditionalCommand Represents a conditional command in the application, extending the base BOOSE.ConditionalCommand functionality. ApplicationElse Represents an 'else' command in the application, handling the alternative execution path in compound commands. ApplicationEnd Represents an application end command that concludes a compound command block such as If, While, or For in the BOOSE scripting environment. ApplicationFor Represents a specialized 'For' command within the application that extends the base 'For' functionality. ApplicationIf Represents an 'if' command block within the application, extending ApplicationCompoundCommand. ApplicationInt Represents an application-specific integer type, inheriting from the BOOSE BOOSE.Int class. ApplicationMethod Represents an application-specific implementation of a BOOSE.Method in a BOOSE program. ApplicationPeek Provides functionality to retrieve (peek) values from an array within a BOOSE program. ApplicationPoke Represents a Poke operation that modifies elements in an array within a BOOSE program. ApplicationReal Represents an application-specific real (double) type, extending functionality from the BOOSE Real class. ApplicationWhile Represents a 'while' command block within the application, extending ApplicationCompoundCommand. Fill Represents the Fill command for a canvas, which sets whether shapes are filled. Form1 GlobalConfig Holds global configuration settings for the application. GlobalConfigTest Provides unit tests for verifying that the GlobalConfig class properly sets and retrieves global configuration properties. MyCircle Represents a command to draw a circle on the canvas. MyDrawTo Represents a command that draws a line to specific coordinates (x, y) on the canvas. This command takes two parameters: the x and y coordinates where the line should be drawn. MyFill Represents a command to fill the canvas with text. MyMoveTo Represents a command to move to specific coordinates on the canvas. MyPenColour Represents a command to set the pen color on the canvas using RGB values. MyStoredProgram Represents a stored program that can be executed on a canvas, with support for variables, methods, and conditional commands. Inherits from BOOSE.StoredProgram. PenSize Represents a command that sets the pen size for drawing on the Canvas. The command takes one parameter: the desired pen size. Triangle Represents a command to draw a triangle with a specified base and height. WriteTo Represents a command to write text to a canvas with validation and processing."
  },
  "api/ASE_Test_Project.CanvasTest.html": {
    "href": "api/ASE_Test_Project.CanvasTest.html",
    "title": "Class CanvasTest | ASE Project",
    "keywords": "Class CanvasTest Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Represents a set of unit tests for the AppCanvas class. [TestClass] public class CanvasTest Inheritance object CanvasTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields canvas The AppCanvas instance used throughout the test methods. public AppCanvas canvas Field Value AppCanvas Methods DrawTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() Tests if DrawTo(int, int) throws a BOOSE.CanvasException when drawing outside the canvas bounds. [TestMethod] [ExpectedException(typeof(CanvasException))] public void DrawTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() DrawTo_ShouldThrowException_WhenGraphicsContextIsNull() Tests if DrawTo(int, int) throws a BOOSE.CanvasException when the internal graphics context is null. [TestMethod] [ExpectedException(typeof(CanvasException))] public void DrawTo_ShouldThrowException_WhenGraphicsContextIsNull() DrawTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() Tests if DrawTo(int, int) updates the pen position when valid coordinates are provided. [TestMethod] public void DrawTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() MoveTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() Tests if MoveTo(int, int) throws a BOOSE.CanvasException when trying to move the pen outside the canvas bounds. [TestMethod] [ExpectedException(typeof(CanvasException))] public void MoveTo_ShouldThrowException_WhenCoordinatesAreOutOfBounds() MoveTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() Tests if MoveTo(int, int) updates the pen position when valid coordinates are provided. [TestMethod] public void MoveTo_ShouldUpdateCursorPosition_WhenCoordinatesAreValid() Rect_ShouldDrawFilledRectangle_WhenValid() Tests drawing a filled rectangle with valid dimensions in Rect(int, int, bool). [TestMethod] public void Rect_ShouldDrawFilledRectangle_WhenValid() Rect_ShouldThrowException_WhenDimensionsAreInvalid() Tests if Rect(int, int, bool) throws a BOOSE.CanvasException when given invalid dimensions. [TestMethod] [ExpectedException(typeof(CanvasException))] public void Rect_ShouldThrowException_WhenDimensionsAreInvalid() SetCanvas_ShouldInitialize_WhenBitmapAndGraphicsAreValid() Tests the SetCanvas(Bitmap, Graphics) method with valid parameters. [TestMethod] public void SetCanvas_ShouldInitialize_WhenBitmapAndGraphicsAreValid() SetColour_ShouldThrowException_WhenRGBValuesAreInvalid() Tests if SetColour(int, int, int) throws a BOOSE.CanvasException when invalid RGB values are supplied. [TestMethod] [ExpectedException(typeof(CanvasException))] public void SetColour_ShouldThrowException_WhenRGBValuesAreInvalid() SetUp() Initializes the test fixture by creating a new AppCanvas instance. [TestInitialize] public void SetUp() TestBoundaryPenPosition() Tests whether pen coordinates that exceed the canvas boundary are reset to 0. [TestMethod] public void TestBoundaryPenPosition() TestCircleExceedsCanvas() Tests if drawing a circle that exceeds the canvas size throws a BOOSE.CanvasException. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestCircleExceedsCanvas() TestCustomCanvasSizeInitialization() Tests whether Set(int, int) correctly changes the canvas size. [TestMethod] public void TestCustomCanvasSizeInitialization() TestDefaultConstructor() Tests whether the default constructor initializes XSIDE, YSIDE, and PenSize as expected. [TestMethod] public void TestDefaultConstructor() TestDrawCircleInvalidRadius() Tests if drawing a circle with an invalid radius (negative) throws a BOOSE.CanvasException. [TestMethod] public void TestDrawCircleInvalidRadius() TestDrawCircleValid() Tests drawing a valid circle. [TestMethod] public void TestDrawCircleValid() TestExceedMaximumCanvasSize() Tests whether setting a canvas size beyond MaxValue throws a BOOSE.CanvasException. [TestMethod] [ExpectedException(typeof(CanvasException))] public void TestExceedMaximumCanvasSize() TestInvalidCanvasSize_ShouldThrowCanvasException() Tests if setting invalid canvas sizes (negative dimensions) throws a BOOSE.CanvasException. [TestMethod] public void TestInvalidCanvasSize_ShouldThrowCanvasException() TestResetCanvas() Tests if Clear() resets the pen position to (0, 0). [TestMethod] public void TestResetCanvas() TestSetPenColorValid() Tests whether setting a valid pen color updates PenColour. [TestMethod] public void TestSetPenColorValid() TestSetPenPositionInvalid() Tests whether invalid pen positions are corrected to 0. [TestMethod] public void TestSetPenPositionInvalid() TestSetPenPositionValid() Tests whether setting valid pen positions updates Xpos and Ypos. [TestMethod] public void TestSetPenPositionValid() TestSetPenSizeInvalid() Tests if invalid pen sizes (zero or negative) are reset to the default (1). [TestMethod] public void TestSetPenSizeInvalid() TestSetPenSizeValid() Tests whether setting a valid PenSize works as expected. [TestMethod] public void TestSetPenSizeValid() TestToggleShapeFilling() Tests whether toggling shape filling changes the Filled property. [TestMethod] public void TestToggleShapeFilling()"
  },
  "api/ASE_Test_Project.CommandFactoryTest.html": {
    "href": "api/ASE_Test_Project.CommandFactoryTest.html",
    "title": "Class CommandFactoryTest | ASE Project",
    "keywords": "Class CommandFactoryTest Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Test class to verify the behavior of the AppCommandFactory and its command creation logic. [TestClass] public class CommandFactoryTest Inheritance object CommandFactoryTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This class contains a series of unit tests that ensure the AppCommandFactory correctly creates instances of command objects based on the provided command strings. It also verifies that invalid commands appropriately throw exceptions. Methods SetUp() Initializes a new instance of the AppCommandFactory before each test. [TestInitialize] public void SetUp() Remarks This method is executed before each test method to ensure that a fresh instance of AppCommandFactory is used, preventing state leakage between tests. TestMakeCommand_Array_ShouldReturnApplicationArray() Tests that the \"array\" command returns a ApplicationArray object. [TestMethod] public void TestMakeCommand_Array_ShouldReturnApplicationArray() Remarks Ensures that the factory produces an instance of ApplicationArray when the \"array\" command is used. TestMakeCommand_Boolean_ShouldReturnApplicationBoolean() Tests that the \"boolean\" command returns a ApplicationBoolean object. [TestMethod] public void TestMakeCommand_Boolean_ShouldReturnApplicationBoolean() Remarks Verifies that the factory correctly creates an instance of ApplicationBoolean for the \"boolean\" command. TestMakeCommand_Call_ShouldReturnCall() Tests that the \"call\" command returns a BOOSE.Call object. [TestMethod] public void TestMakeCommand_Call_ShouldReturnCall() Remarks Ensures that the factory produces an instance of BOOSE.Call when the \"call\" command is used. TestMakeCommand_Circle_ShouldReturnAppCircle() Tests that the \"circle\" command returns a MyCircle object. [TestMethod] public void TestMakeCommand_Circle_ShouldReturnAppCircle() Remarks Verifies that when the \"circle\" command is provided to the factory, it correctly creates an instance of MyCircle. TestMakeCommand_Clear_ShouldReturnClear() Tests that the \"clear\" command returns a Clear object. [TestMethod] public void TestMakeCommand_Clear_ShouldReturnClear() Remarks Ensures that the factory produces an instance of Clear when the \"clear\" command is used. TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() Tests that the \"drawto\" command returns a MyDrawTo object. [TestMethod] public void TestMakeCommand_DrawTo_ShouldReturnAppDrawTo() Remarks Ensures that the factory produces an instance of MyDrawTo when the \"drawto\" command is used. TestMakeCommand_Else_ShouldReturnApplicationElse() Tests that the \"else\" command returns a ApplicationElse object. [TestMethod] public void TestMakeCommand_Else_ShouldReturnApplicationElse() Remarks Ensures that the factory produces an instance of ApplicationElse when the \"else\" command is used. TestMakeCommand_End_ShouldReturnApplicationEnd() Tests that the \"end\" command returns a ApplicationEnd object. [TestMethod] public void TestMakeCommand_End_ShouldReturnApplicationEnd() Remarks Ensures that the factory produces an instance of ApplicationEnd when the \"end\" command is used. TestMakeCommand_Evaluation_ShouldReturnEvaluation() Tests that the \"evaluation\" command returns a BOOSE.Evaluation object. [TestMethod] public void TestMakeCommand_Evaluation_ShouldReturnEvaluation() Remarks Verifies that the factory correctly creates an instance of BOOSE.Evaluation for the \"evaluation\" command. TestMakeCommand_Fill_ShouldReturnFill() Tests that the \"fill\" command returns a MyFill object. [TestMethod] public void TestMakeCommand_Fill_ShouldReturnFill() Remarks Ensures that the factory produces an instance of MyFill when the \"fill\" command is used. TestMakeCommand_For_ShouldReturnApplicationFor() Tests that the \"for\" command returns a ApplicationFor object. [TestMethod] public void TestMakeCommand_For_ShouldReturnApplicationFor() Remarks Ensures that the factory produces an instance of ApplicationFor when the \"for\" command is used. TestMakeCommand_If_ShouldReturnApplicationIf() Tests that the \"if\" command returns a ApplicationIf object. [TestMethod] public void TestMakeCommand_If_ShouldReturnApplicationIf() Remarks Verifies that the factory correctly creates an instance of ApplicationIf for the \"if\" command. TestMakeCommand_Int_ShouldReturnApplicationInt() Tests that the \"int\" command returns a ApplicationInt object. [TestMethod] public void TestMakeCommand_Int_ShouldReturnApplicationInt() Remarks Verifies that the factory correctly creates an instance of ApplicationInt for the \"int\" command. TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() Tests that invalid commands throw a BOOSE.FactoryException. [TestMethod] [ExpectedException(typeof(FactoryException))] public void TestMakeCommand_InvalidCommand_ShouldThrowFactoryException() Remarks Verifies that providing an invalid command string to the factory results in a BOOSE.FactoryException being thrown. TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() Tests that the \"moveto\" command returns a MyMoveTo object. [TestMethod] public void TestMakeCommand_MoveTo_ShouldReturnAppMoveTo() Remarks Ensures that the factory creates an instance of MyMoveTo when the \"moveto\" command is used. TestMakeCommand_Peek_ShouldReturnApplicationPeek() Tests that the \"peek\" command returns a ApplicationPeek object. [TestMethod] public void TestMakeCommand_Peek_ShouldReturnApplicationPeek() Remarks Verifies that the factory correctly creates an instance of ApplicationPeek for the \"peek\" command. TestMakeCommand_PenColour_ShouldReturnAppPenColour() Tests that the \"pencolour\" command returns a MyPenColour object. [TestMethod] public void TestMakeCommand_PenColour_ShouldReturnAppPenColour() Remarks Verifies that the factory correctly creates an instance of MyPenColour for the \"pencolour\" command. TestMakeCommand_PenSize_ShouldReturnPenSize() Tests that the \"pensize\" command returns a PenSize object. [TestMethod] public void TestMakeCommand_PenSize_ShouldReturnPenSize() Remarks Verifies that the factory correctly creates an instance of PenSize for the \"pensize\" command. TestMakeCommand_Poke_ShouldReturnApplicationPoke() Tests that the \"poke\" command returns a ApplicationPoke object. [TestMethod] public void TestMakeCommand_Poke_ShouldReturnApplicationPoke() Remarks Ensures that the factory produces an instance of ApplicationPoke when the \"poke\" command is used. TestMakeCommand_Real_ShouldReturnApplicationReal() Tests that the \"real\" command returns a ApplicationReal object. [TestMethod] public void TestMakeCommand_Real_ShouldReturnApplicationReal() Remarks Ensures that the factory produces an instance of ApplicationReal when the \"real\" command is used. TestMakeCommand_Rect_ShouldReturnAppRectangle() Tests that the \"rect\" command returns a MyRectangle object. [TestMethod] public void TestMakeCommand_Rect_ShouldReturnAppRectangle() Remarks Verifies that the factory correctly creates an instance of MyRectangle for the \"rect\" command. TestMakeCommand_Reset_ShouldReturnReset() Tests that the \"reset\" command returns a Reset object. [TestMethod] public void TestMakeCommand_Reset_ShouldReturnReset() Remarks Verifies that the factory correctly creates an instance of Reset for the \"reset\" command. TestMakeCommand_Tri_ShouldReturnTriangle() Tests that the \"tri\" command returns a Triangle object. [TestMethod] public void TestMakeCommand_Tri_ShouldReturnTriangle() Remarks Ensures that the factory produces an instance of Triangle when the \"tri\" command is provided. TestMakeCommand_While_ShouldReturnApplicationWhile() Tests that the \"while\" command returns a ApplicationWhile object. [TestMethod] public void TestMakeCommand_While_ShouldReturnApplicationWhile() Remarks Verifies that the factory correctly creates an instance of ApplicationWhile for the \"while\" command. TestMakeCommand_WriteTo_ShouldReturnWriteTo() Tests that the \"writeto\" command returns a WriteTo object. [TestMethod] public void TestMakeCommand_WriteTo_ShouldReturnWriteTo() Remarks Verifies that the factory creates an instance of WriteTo for the \"writeto\" command. TestMakeCommand_method_ShouldReturnApplicationMethod() Tests that the \"method\" command returns a ApplicationMethod object. [TestMethod] public void TestMakeCommand_method_ShouldReturnApplicationMethod() Remarks Verifies that the factory correctly creates an instance of ApplicationMethod for the \"method\" command."
  },
  "api/ASE_Test_Project.CommandUnitTests.html": {
    "href": "api/ASE_Test_Project.CommandUnitTests.html",
    "title": "Class CommandUnitTests | ASE Project",
    "keywords": "Class CommandUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Unit tests for command execution functionality in the application. [TestClass] public class CommandUnitTests Inheritance object CommandUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks This test class verifies that the program execution and single command execution do not alter the global configuration's output exception message. It uses mock dependencies for testing the interaction between components such as the command factory, parser, and stored program. Methods Setup() Sets up the test environment by initializing mock objects and dependencies. [TestInitialize] public void Setup() Remarks This method is executed before each test to ensure a clean and consistent test environment. Test_ArrayCommand_Restricted() Tests the restricted usage of the ARRAY command. [TestMethod] public void Test_ArrayCommand_Restricted() Remarks Demonstrates the use of arrays that adhere to restrictions, ensuring no exceptions are thrown during execution. Test_ArrayCommand_UnRestricted() Tests the unrestricted usage of the ARRAY command. [TestMethod] public void Test_ArrayCommand_UnRestricted() Remarks Demonstrates the use of arrays that violate restrictions, requiring replacement of the Array class. Ensures that the execution does not throw any exceptions. Test_ForCommand_Restricted() Tests the restricted usage of the FOR command. [TestMethod] public void Test_ForCommand_Restricted() Remarks Demonstrates a FOR statement that adheres to restrictions, ensuring no exceptions are thrown during execution. Test_ForCommand_Unrestricted() Tests the unrestricted usage of the FOR command. [TestMethod] public void Test_ForCommand_Unrestricted() Remarks Demonstrates a FOR statement that violates restrictions, requiring replacement of the For class. Ensures that the execution does not throw any exceptions. Test_IFCommand_Restricted() Tests the restricted usage of the IF command. [TestMethod] public void Test_IFCommand_Restricted() Remarks Demonstrates an IF statement that adheres to restrictions, ensuring no exceptions are thrown during execution. Test_IFCommand_Unrestricted() Tests the unrestricted usage of the IF command. [TestMethod] public void Test_IFCommand_Unrestricted() Remarks Demonstrates an IF statement that violates restrictions, requiring replacement of the If class. Ensures that the execution does not throw any exceptions. Test_IntCommand_Restricted() Tests the restricted usage of the INT command. [TestMethod] public void Test_IntCommand_Restricted() Remarks Demonstrates the use of integer variables that do not violate restrictions, ensuring no exceptions are thrown during execution. Test_IntCommand_UnRestricted() Tests the unrestricted usage of the INT command. [TestMethod] public void Test_IntCommand_UnRestricted() Remarks Demonstrates the use of integer variables that do not violate restrictions, ensuring no exceptions are thrown during execution. Test_MethodCommand_UnRestricted() Tests the unrestricted usage of the METHOD command. [TestMethod] public void Test_MethodCommand_UnRestricted() Remarks Demonstrates the definition and invocation of methods, ensuring no exceptions are thrown during execution. Test_MultipleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Tests that running multiple commands does not change the global output exception message. [TestMethod] public void Test_MultipleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Remarks Ensures that executing multiple valid commands in sequence does not throw any exceptions. Test_ProgramSizeCommand_UnRestricted() Tests the unrestricted usage of program size commands. [TestMethod] public void Test_ProgramSizeCommand_UnRestricted() Remarks Demonstrates handling of large programs with many lines, ensuring no exceptions are thrown during execution. Test_RealCommand_Restricted() Tests the restricted usage of the REAL command. [TestMethod] public void Test_RealCommand_Restricted() Remarks Demonstrates the use of real values without violating restrictions, ensuring no exceptions are thrown during execution. Test_RealCommand_Unrestricted() Tests the unrestricted usage of the REAL command. [TestMethod] public void Test_RealCommand_Unrestricted() Remarks Demonstrates the use of real values that violate restrictions, requiring replacement of the Real class. Ensures that the execution does not throw any exceptions. Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg() Tests that running the entire program does not change the global output exception message. [TestMethod] public void Test_RunProgram_ShouldNotChangeGlobalOutputExceptionMsg() Remarks Ensures that executing a series of valid commands does not throw any exceptions. Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Tests that running a single command does not change the global output exception message. [TestMethod] public void Test_RunSingleCommand_ShouldNotChangeGlobalOutputExceptionMsg() Examples This test runs a single moveto command and verifies that no exception is thrown: mockParser.ParseProgram(\"moveto 100,100\"); program.Run(); Assert.IsTrue(true, \"No exception should be thrown when a valid single command is executed.\"); Remarks Validates that even when a single valid command is executed, no exception is thrown during execution. Test_WhileCommand_Restricted() Tests the restricted usage of the WHILE command. [TestMethod] public void Test_WhileCommand_Restricted() Remarks Demonstrates a WHILE statement that adheres to restrictions, ensuring no exceptions are thrown during execution. Test_WhileCommand_Unrestricted() Tests the unrestricted usage of the WHILE command. [TestMethod] public void Test_WhileCommand_Unrestricted() Remarks Demonstrates a WHILE statement that violates restrictions, requiring replacement of the While class. Ensures that the execution does not throw any exceptions."
  },
  "api/ASE_Test_Project.MyCircleUnitTests.html": {
    "href": "api/ASE_Test_Project.MyCircleUnitTests.html",
    "title": "Class MyCircleUnitTests | ASE Project",
    "keywords": "Class MyCircleUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Contains unit tests for the MyCircle command class, verifying correct instantiation and parameter checking. [TestClass] public class MyCircleUnitTests Inheritance object MyCircleUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Verifies that CheckParameters(string[]) does not throw an exception when valid parameters are supplied. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Ensures that the MyCircle constructor initializes properly when given valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes the test fixture by creating a new mocked BOOSE.Canvas. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyClearUnitTests.html": {
    "href": "api/ASE_Test_Project.MyClearUnitTests.html",
    "title": "Class MyClearUnitTests | ASE Project",
    "keywords": "Class MyClearUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Contains unit tests for the Clear command class, ensuring correct initialization, parameter validation, and execution behavior. [TestClass] public class MyClearUnitTests Inheritance object MyClearUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldIgnoreAdditionalParameters() Tests that CheckParameters(string[]) ignores any extra parameters beyond what is expected (in this case, none). [TestMethod] public void CheckParameters_ShouldIgnoreAdditionalParameters() CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() Tests that CheckParameters(string[]) does not throw an exception when given an empty parameter list. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Tests that CheckParameters(string[]) does not throw an exception when given a null parameter list. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Constructor_ShouldInitialize_WhenCanvasIsValid() Tests that the Clear command's constructor successfully initializes when provided with a valid BOOSE.Canvas object. [TestMethod] public void Constructor_ShouldInitialize_WhenCanvasIsValid() Execute_ShouldClearCanvas_WhenCanvasIsValid() Tests that the Execute() method calls the BOOSE.Canvas.Clear() method exactly once on a valid canvas. [TestMethod] public void Execute_ShouldClearCanvas_WhenCanvasIsValid() Execute_ShouldHandleNullCanvas_Gracefully() Tests that Execute() gracefully handles a null BOOSE.Canvas by throwing a NullReferenceException. [TestMethod] public void Execute_ShouldHandleNullCanvas_Gracefully() Execute_ShouldNotThrowException_WhenCanvasIsEmpty() Tests that Execute() does not throw an exception even if the canvas is empty or has no specific data. [TestMethod] public void Execute_ShouldNotThrowException_WhenCanvasIsEmpty() TestInitialize() Initializes the test fixture by creating a new mocked BOOSE.Canvas. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyDrawToUnitTests.html": {
    "href": "api/ASE_Test_Project.MyDrawToUnitTests.html",
    "title": "Class MyDrawToUnitTests | ASE Project",
    "keywords": "Class MyDrawToUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Contains unit tests for the MyDrawTo command class, verifying its behavior upon construction and parameter handling. [TestClass] public class MyDrawToUnitTests Inheritance object MyDrawToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Tests that CheckParameters(string[]) does not throw an exception when passed valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Tests whether the MyDrawTo constructor successfully initializes with valid X and Y coordinates. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldThrowRestrictionException_WhenCoordinatesAreNegative() Tests whether the MyDrawTo constructor throws a BOOSE.RestrictionException when given negative X or Y coordinates. [TestMethod] public void Constructor_ShouldThrowRestrictionException_WhenCoordinatesAreNegative() TestInitialize() Initializes the test fixture by creating a mocked BOOSE.Canvas instance. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyFillUnitTests.html": {
    "href": "api/ASE_Test_Project.MyFillUnitTests.html",
    "title": "Class MyFillUnitTests | ASE Project",
    "keywords": "Class MyFillUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Provides unit tests for the MyFill class. [TestClass] public class MyFillUnitTests Inheritance object MyFillUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldHandleEmptyParameterGracefully() Verifies that the command gracefully handles an empty parameter. [TestMethod] public void CheckParameters_ShouldHandleEmptyParameterGracefully() CheckParameters_ShouldHandleMultipleParametersGracefully() Verifies that the command gracefully handles multiple parameters being passed in. [TestMethod] public void CheckParameters_ShouldHandleMultipleParametersGracefully() CheckParameters_ShouldHandleNullParametersGracefully() Verifies that the command gracefully handles null parameters. [TestMethod] public void CheckParameters_ShouldHandleNullParametersGracefully() Constructor_ShouldInitialize_WhenTextIsValid() Verifies that the constructor initializes successfully when provided with valid text. [TestMethod] public void Constructor_ShouldInitialize_WhenTextIsValid() Constructor_ShouldThrowException_WhenTextIsNull() Verifies that the constructor throws an ArgumentNullException when the provided text is null. [TestMethod] public void Constructor_ShouldThrowException_WhenTextIsNull() Execute_ShouldNotEnableFill_WhenTextExceedsLength() Verifies that fill is not enabled when the provided text exceeds the allowed length. [TestMethod] public void Execute_ShouldNotEnableFill_WhenTextExceedsLength() Execute_ShouldNotEnableFill_WhenTextIsWhitespace() Verifies that fill is not enabled when the provided text is whitespace. [TestMethod] public void Execute_ShouldNotEnableFill_WhenTextIsWhitespace() SetFilled_ShouldDisableFill_WhenTextIsFalse() Verifies that the global fill state is disabled when text equals \"false\". [TestMethod] public void SetFilled_ShouldDisableFill_WhenTextIsFalse() SetFilled_ShouldDisableFill_WhenTextIsInvalid() Verifies that the global fill state is disabled when the provided text is invalid. [TestMethod] public void SetFilled_ShouldDisableFill_WhenTextIsInvalid() SetFilled_ShouldEnableFill_WhenTextIsTrue() Verifies that the global fill state is enabled when text equals \"true\". [TestMethod] public void SetFilled_ShouldEnableFill_WhenTextIsTrue() TestInitialize() Initializes common test resources before each test is run. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyMoveToUnitTests.html": {
    "href": "api/ASE_Test_Project.MyMoveToUnitTests.html",
    "title": "Class MyMoveToUnitTests | ASE Project",
    "keywords": "Class MyMoveToUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Provides unit tests for the MyMoveTo class. [TestClass] public class MyMoveToUnitTests Inheritance object MyMoveToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Verifies that CheckParameters(string[]) does not throw an exception when provided with valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Verifies that the MyMoveTo constructor initializes successfully when provided with valid parameter values. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldThrowRestrictionException_WhenCoordinatesExceedLimit() Verifies that the MyMoveTo constructor throws a BOOSE.RestrictionException when the X or Y coordinates exceed the maximum allowed limit of 2000. [TestMethod] public void Constructor_ShouldThrowRestrictionException_WhenCoordinatesExceedLimit() TestInitialize() Initializes common test resources before each test is run. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyPenColourUnitTests.html": {
    "href": "api/ASE_Test_Project.MyPenColourUnitTests.html",
    "title": "Class MyPenColourUnitTests | ASE Project",
    "keywords": "Class MyPenColourUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Provides unit tests for the MyPenColour class. [TestClass] public class MyPenColourUnitTests Inheritance object MyPenColourUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Verifies that CheckParameters(string[]) does not throw an exception when provided with valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Verifies that the MyPenColour constructor initializes successfully when provided with valid parameter values. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes common test resources before each test is run. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyRectangleUnitTests.html": {
    "href": "api/ASE_Test_Project.MyRectangleUnitTests.html",
    "title": "Class MyRectangleUnitTests | ASE Project",
    "keywords": "Class MyRectangleUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Provides unit tests for the MyRectangle class. [TestClass] public class MyRectangleUnitTests Inheritance object MyRectangleUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Verifies that CheckParameters(string[]) does not throw an exception when provided with valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Verifies that the MyRectangle constructor initializes successfully when provided with valid parameter values. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() TestInitialize() Initializes common test resources before each test is run. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyResetsUnitTests.html": {
    "href": "api/ASE_Test_Project.MyResetsUnitTests.html",
    "title": "Class MyResetsUnitTests | ASE Project",
    "keywords": "Class MyResetsUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Provides unit tests for the Reset class. [TestClass] public class MyResetsUnitTests Inheritance object MyResetsUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldIgnoreAdditionalParameters() Verifies that CheckParameters(string[]) ignores additional parameters. [TestMethod] public void CheckParameters_ShouldIgnoreAdditionalParameters() CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() Verifies that CheckParameters(string[]) does not throw an exception when the provided parameter list is empty. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsEmpty() CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Verifies that CheckParameters(string[]) does not throw an exception when the provided parameter list is null. [TestMethod] public void CheckParameters_ShouldNotThrowException_WhenParameterListIsNull() Constructor_ShouldInitialize_WhenCanvasIsValid() Verifies that the Reset constructor initializes successfully when provided with a valid BOOSE.Canvas instance. [TestMethod] public void Constructor_ShouldInitialize_WhenCanvasIsValid() Execute_ShouldThrowNullReferenceException_WhenCanvasIsNull() Verifies that Execute() throws a NullReferenceException when the BOOSE.Canvas instance is null. [TestMethod] public void Execute_ShouldThrowNullReferenceException_WhenCanvasIsNull() TestInitialize() Initializes common test resources before each test is run. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyStoredProgramUnitTests.html": {
    "href": "api/ASE_Test_Project.MyStoredProgramUnitTests.html",
    "title": "Class MyStoredProgramUnitTests | ASE Project",
    "keywords": "Class MyStoredProgramUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll [TestClass] public class MyStoredProgramUnitTests Inheritance object MyStoredProgramUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Setup() [TestInitialize] public void Setup() Test_AddVariable_Duplicate_ShouldNotStore() [TestMethod] public void Test_AddVariable_Duplicate_ShouldNotStore() Test_AddVariable_ShouldStoreVariable() [TestMethod] public void Test_AddVariable_ShouldStoreVariable() Test_EvaluateExpression_Invalid_ShouldThrowException() [TestMethod] public void Test_EvaluateExpression_Invalid_ShouldThrowException() Test_EvaluateExpression_ShouldReturnResult() [TestMethod] public void Test_EvaluateExpression_ShouldReturnResult() Test_InitializeProgram_ShouldSetDefaults() [TestMethod] public void Test_InitializeProgram_ShouldSetDefaults() Test_PopEmptyStack_ShouldThrowException() [TestMethod] public void Test_PopEmptyStack_ShouldThrowException() Test_PushPopConditionalCommands_ShouldHandleStack() [TestMethod] public void Test_PushPopConditionalCommands_ShouldHandleStack() Test_UpdateVariable_ShouldUpdateValue() [TestMethod] public void Test_UpdateVariable_ShouldUpdateValue()"
  },
  "api/ASE_Test_Project.MyTriangleTests.html": {
    "href": "api/ASE_Test_Project.MyTriangleTests.html",
    "title": "Class MyTriangleTests | ASE Project",
    "keywords": "Class MyTriangleTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Provides unit tests for the Triangle class. [TestClass] public class MyTriangleTests Inheritance object MyTriangleTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParametersAndExecute_ShouldNotDrawTriangle_WhenCheckParametersFails() Verifies that CheckParameters(string[]) prevents triangle drawing execution when parameter validation fails. [TestMethod] public void CheckParametersAndExecute_ShouldNotDrawTriangle_WhenCheckParametersFails() CheckParameters_ShouldHandleInvalidParameterCount_TooFew() Verifies that CheckParameters(string[]) handles scenarios where fewer parameters than expected are provided. [TestMethod] public void CheckParameters_ShouldHandleInvalidParameterCount_TooFew() CheckParameters_ShouldHandleInvalidParameterCount_TooMany() Verifies that CheckParameters(string[]) handles scenarios where more parameters than expected are provided. [TestMethod] public void CheckParameters_ShouldHandleInvalidParameterCount_TooMany() CheckParameters_ShouldHandleNullParameters() Verifies that CheckParameters(string[]) gracefully handles a null parameter array. [TestMethod] public void CheckParameters_ShouldHandleNullParameters() Constructor_ShouldInitialize_WhenParametersAreValid() Verifies that the Triangle constructor initializes successfully when provided with valid parameters for base length and height. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldInitialize_WithDifferentParameters() Verifies that the Triangle constructor initializes correctly with different valid parameters. [TestMethod] public void Constructor_ShouldInitialize_WithDifferentParameters() TestInitialize() Initializes common test resources before each test is run. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.MyWriteToUnitTests.html": {
    "href": "api/ASE_Test_Project.MyWriteToUnitTests.html",
    "title": "Class MyWriteToUnitTests | ASE Project",
    "keywords": "Class MyWriteToUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Provides unit tests for the WriteTo class. [TestClass] public class MyWriteToUnitTests Inheritance object MyWriteToUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotWriteText_WhenParameterCountIsInvalid_TooFew() Verifies that CheckParameters(string[]) and Execute() do not call WriteText(string) when the parameter count is too few (less than expected). [TestMethod] public void CheckParameters_ShouldNotWriteText_WhenParameterCountIsInvalid_TooFew() CheckParameters_ShouldNotWriteText_WhenParameterCountIsInvalid_TooMany() Verifies that CheckParameters(string[]) and Execute() do not call WriteText(string) when the parameter count is too many (more than expected). [TestMethod] public void CheckParameters_ShouldNotWriteText_WhenParameterCountIsInvalid_TooMany() CheckParameters_ShouldNotWriteText_WhenParameterIsWhitespace() Verifies that CheckParameters(string[]) and Execute() do not call WriteText(string) when the provided parameter is whitespace only. [TestMethod] public void CheckParameters_ShouldNotWriteText_WhenParameterIsWhitespace() CheckParameters_ShouldNotWriteText_WhenParameterListIsNull() Verifies that CheckParameters(string[]) and Execute() do not call WriteText(string) when the parameter list is null. [TestMethod] public void CheckParameters_ShouldNotWriteText_WhenParameterListIsNull() Constructor_ShouldInitialize_WhenParametersAreValid() Verifies that the WriteTo constructor initializes properly when valid text is provided. [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Constructor_ShouldInitialize_WithDifferentValidParameters() Verifies that the WriteTo constructor initializes properly with a different valid text parameter. [TestMethod] public void Constructor_ShouldInitialize_WithDifferentValidParameters() Execute_ShouldNotWriteText_WhenTextExceedsMaxLength() Verifies that Execute() does not call WriteText(string) when the text exceeds the allowed maximum length (e.g., 100 characters). [TestMethod] public void Execute_ShouldNotWriteText_WhenTextExceedsMaxLength() Execute_ShouldNotWriteText_WhenTextIsEmpty() Verifies that Execute() does not call WriteText(string) when the text is empty. [TestMethod] public void Execute_ShouldNotWriteText_WhenTextIsEmpty() Execute_ShouldNotWriteText_WhenTextIsNull() Verifies that Execute() does not call WriteText(string) when the text is null. [TestMethod] public void Execute_ShouldNotWriteText_WhenTextIsNull() Execute_ShouldNotWriteText_WhenTextIsWhitespace() Verifies that Execute() does not call WriteText(string) when the text is composed only of whitespace. [TestMethod] public void Execute_ShouldNotWriteText_WhenTextIsWhitespace() TestInitialize() Initializes test resources before each test runs. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.ParserTest.html": {
    "href": "api/ASE_Test_Project.ParserTest.html",
    "title": "Class ParserTest | ASE Project",
    "keywords": "Class ParserTest Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Provides unit tests for the AppPraser class, verifying that it can parse commands and programs correctly using the provided command factory and stored program. [TestClass] public class ParserTest Inheritance object ParserTest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetUp() Initializes the test environment before each test by creating real instances of AppCanvas, AppCommandFactory, BOOSE.StoredProgram, and AppPraser. [TestInitialize] public void SetUp() TestParseCommand_ShouldReturnValidCommand_ForKnownCommand() Verifies that ParseCommand(string) returns a valid command when given a known command line (e.g., \"clear\"). The returned command should be an instance of Clear. [TestMethod] public void TestParseCommand_ShouldReturnValidCommand_ForKnownCommand()"
  },
  "api/ASE_Test_Project.PenSizeUnitTests.html": {
    "href": "api/ASE_Test_Project.PenSizeUnitTests.html",
    "title": "Class PenSizeUnitTests | ASE Project",
    "keywords": "Class PenSizeUnitTests Namespace ASE_Test_Project Assembly ASE_Test_Project.dll Provides unit tests for the PenSize class to ensure correct handling of pen size parameters and execution logic. [TestClass] public class PenSizeUnitTests Inheritance object PenSizeUnitTests Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckParameters_ShouldNotThrow_WhenParametersAreValid() Verifies that CheckParameters(string[]) does not throw an exception when supplied with valid parameters. [TestMethod] public void CheckParameters_ShouldNotThrow_WhenParametersAreValid() Constructor_ShouldInitialize_WhenParametersAreValid() Verifies that the PenSize constructor initializes correctly when given valid parameters (e.g., a pen size of 10). [TestMethod] public void Constructor_ShouldInitialize_WhenParametersAreValid() Execute_ShouldHandleBoundaryValue_Zero() Verifies that Execute() correctly handles a boundary pen size value of zero (0), setting PenSize accordingly. [TestMethod] public void Execute_ShouldHandleBoundaryValue_Zero() TestInitialize() Initializes the mock BOOSE.Canvas object and prepares the test environment. [TestInitialize] public void TestInitialize()"
  },
  "api/ASE_Test_Project.html": {
    "href": "api/ASE_Test_Project.html",
    "title": "Namespace ASE_Test_Project | ASE Project",
    "keywords": "Namespace ASE_Test_Project Classes CanvasTest Represents a set of unit tests for the AppCanvas class. CommandFactoryTest Test class to verify the behavior of the AppCommandFactory and its command creation logic. CommandUnitTests Unit tests for command execution functionality in the application. MyCircleUnitTests Contains unit tests for the MyCircle command class, verifying correct instantiation and parameter checking. MyClearUnitTests Contains unit tests for the Clear command class, ensuring correct initialization, parameter validation, and execution behavior. MyDrawToUnitTests Contains unit tests for the MyDrawTo command class, verifying its behavior upon construction and parameter handling. MyFillUnitTests Provides unit tests for the MyFill class. MyMoveToUnitTests Provides unit tests for the MyMoveTo class. MyPenColourUnitTests Provides unit tests for the MyPenColour class. MyRectangleUnitTests Provides unit tests for the MyRectangle class. MyResetsUnitTests Provides unit tests for the Reset class. MyStoredProgramUnitTests MyTriangleTests Provides unit tests for the Triangle class. MyWriteToUnitTests Provides unit tests for the WriteTo class. ParserTest Provides unit tests for the AppPraser class, verifying that it can parse commands and programs correctly using the provided command factory and stored program. PenSizeUnitTests Provides unit tests for the PenSize class to ensure correct handling of pen size parameters and execution logic."
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | ASE Project",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | ASE Project",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ASE Project",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}